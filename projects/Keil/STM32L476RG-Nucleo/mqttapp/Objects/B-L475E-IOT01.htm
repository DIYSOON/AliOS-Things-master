<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\B-L475E-IOT01.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\B-L475E-IOT01.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Jan 16 11:39:36 2018
<BR><P>
<H3>Maximum Stack Usage =       4824 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
do_update &rArr; update_action &rArr; ota_do_update_packet &rArr; ota_status_post &rArr; platform_ota_status_post &rArr; IOT_MQTT_Yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[32a]">cpu_intrpt_save</a>
 <LI><a href="#[32b]">cpu_intrpt_restore</a>
 <LI><a href="#[3cb]">cpu_first_task_start</a>
 <LI><a href="#[32d]">cpu_task_switch</a>
 <LI><a href="#[3b8]">cpu_intrpt_switch</a>
 <LI><a href="#[2c]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[40]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[30d]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30d]">cJSON_Delete</a><BR>
 <LI><a href="#[4f0]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[313]">parse_value</a><BR>
 <LI><a href="#[4ee]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[313]">parse_value</a><BR>
 <LI><a href="#[4a1]">x509_crt_verify_child</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a1]">x509_crt_verify_child</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[40]">ADC1_2_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[5d]">ADC3_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[28]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[42]">CAN1_RX0_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[43]">CAN1_RX1_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[44]">CAN1_SCE_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[41]">CAN1_TX_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[6e]">COMP_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[6b]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[6c]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[6d]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[58]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[39]">DMA1_Channel1_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[3a]">DMA1_Channel2_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[3b]">DMA1_Channel3_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[3c]">DMA1_Channel4_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[3d]">DMA1_Channel5_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[3e]">DMA1_Channel6_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[3f]">DMA1_Channel7_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[66]">DMA2_Channel1_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[67]">DMA2_Channel2_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[68]">DMA2_Channel3_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[69]">DMA2_Channel4_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[6a]">DMA2_Channel5_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[72]">DMA2_Channel6_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[73]">DMA2_Channel7_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[2b]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[34]">EXTI0_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[56]">EXTI15_10_IRQHandler</a> from stm32l4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[35]">EXTI1_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[36]">EXTI2_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[37]">EXTI3_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[38]">EXTI4_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[45]">EXTI9_5_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[32]">FLASH_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[5e]">FMC_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[7d]">FPU_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[26]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[4e]">I2C1_ER_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[4d]">I2C1_EV_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[50]">I2C2_ER_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[4f]">I2C2_EV_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[77]">I2C3_ER_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[76]">I2C3_EV_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[97]">LITE_free_routine</a> from mem_stats.o(i.LITE_free_routine) referenced from mqtt_client.o(i.iotx_mc_init)
 <LI><a href="#[6f]">LPTIM1_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[70]">LPTIM2_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[74]">LPUART1_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[27]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[25]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[a5]">OSA_mutex_free</a> from mbedtls_alt.o(i.OSA_mutex_free) referenced from rsa.o(i.mbedtls_rsa_init)
 <LI><a href="#[a6]">OSA_mutex_init</a> from mbedtls_alt.o(i.OSA_mutex_init) referenced from rsa.o(i.mbedtls_rsa_init)
 <LI><a href="#[a4]">OSA_mutex_lock</a> from mbedtls_alt.o(i.OSA_mutex_lock) referenced from rsa.o(i.mbedtls_rsa_init)
 <LI><a href="#[a3]">OSA_mutex_unlock</a> from mbedtls_alt.o(i.OSA_mutex_unlock) referenced from rsa.o(i.mbedtls_rsa_init)
 <LI><a href="#[71]">OTG_FS_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[2f]">PVD_PVM_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[2c]">PendSV_Handler</a> from port_c_1.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[75]">QUADSPI_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[33]">RCC_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[7c]">RNG_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[57]">RTC_Alarm_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[31]">RTC_WKUP_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[24]">Reset_Handler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[78]">SAI1_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[79]">SAI2_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[5f]">SDMMC1_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[51]">SPI1_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[52]">SPI2_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[61]">SPI3_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[2a]">SVC_Handler</a> from stm32l4xx_it.o(i.SVC_Handler) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[7a]">SWPMI1_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[2d]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[7f]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l475xx_armcc.o(.text)
 <LI><a href="#[30]">TAMP_STAMP_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[46]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[49]">TIM1_CC_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[48]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[47]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[4a]">TIM2_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[4b]">TIM3_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[4c]">TIM4_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[60]">TIM5_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[64]">TIM6_DAC_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[65]">TIM7_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[59]">TIM8_BRK_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[5c]">TIM8_CC_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[5b]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[5a]">TIM8_UP_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[7b]">TSC_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[62]">UART4_IRQHandler</a> from stm32l4xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[63]">UART5_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[85]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[53]">USART1_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[54]">USART2_IRQHandler</a> from stm32l4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[55]">USART3_IRQHandler</a> from stm32l4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[29]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[2e]">WWDG_IRQHandler</a> from startup_stm32l475xx_armcc.o(.text) referenced from startup_stm32l475xx_armcc.o(RESET)
 <LI><a href="#[a1]">__item_find_cb</a> from kvmgr.o(i.__item_find_cb) referenced from kvmgr.o(i.kv_item_get)
 <LI><a href="#[92]">__item_gc_cb</a> from kvmgr.o(i.__item_gc_cb) referenced from kvmgr.o(i.aos_kv_gc)
 <LI><a href="#[96]">__item_print_cb</a> from kvmgr.o(i.__item_print_cb) referenced from kvmgr.o(i.handle_kv_cmd)
 <LI><a href="#[a0]">__item_recovery_cb</a> from kvmgr.o(i.__item_recovery_cb) referenced from kvmgr.o(i.kv_init)
 <LI><a href="#[80]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l475xx_armcc.o(.text)
 <LI><a href="#[ac]">_demo_message_arrive</a> from mqtt-example-b_l475e.o(i._demo_message_arrive) referenced from mqtt-example-b_l475e.o(i.mqtt_client_example)
 <LI><a href="#[82]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[83]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[81]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[8d]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[8d]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[8e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[88]">_ssl_debug</a> from hal_tls_mbedtls.o(i._ssl_debug) referenced from hal_tls_mbedtls.o(i.TLSConnectNetwork)
 <LI><a href="#[87]">_ssl_random</a> from hal_tls_mbedtls.o(i._ssl_random) referenced from hal_tls_mbedtls.o(i.TLSConnectNetwork)
 <LI><a href="#[d5]">aes_crypt_cbc_wrap</a> from cipher_wrap.o(i.aes_crypt_cbc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[d4]">aes_crypt_ecb_wrap</a> from cipher_wrap.o(i.aes_crypt_ecb_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[d8]">aes_ctx_alloc</a> from cipher_wrap.o(i.aes_ctx_alloc) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[d9]">aes_ctx_free</a> from cipher_wrap.o(i.aes_ctx_free) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[d7]">aes_setkey_dec_wrap</a> from cipher_wrap.o(i.aes_setkey_dec_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[d6]">aes_setkey_enc_wrap</a> from cipher_wrap.o(i.aes_setkey_enc_wrap) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[b3]">aliot_mqtt_ota_callback</a> from ota_transport.o(i.aliot_mqtt_ota_callback) referenced from ota_transport.o(i.platform_ota_subscribe_upgrade)
 <LI><a href="#[21]">aos_free</a> from aos_rhino.o(i.aos_free) referenced 2 times from cjson.o(.data)
 <LI><a href="#[b7]">aos_kv_gc</a> from kvmgr.o(i.aos_kv_gc) referenced from kvmgr.o(i.trigger_gc)
 <LI><a href="#[20]">aos_malloc</a> from aos_rhino.o(i.aos_malloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[86]">bufchar</a> from mqttpacket.o(i.bufchar) referenced from mqttpacket.o(i.MQTTPacket_decodeBuf)
 <LI><a href="#[b1]">cancel_update</a> from ota_service.o(i.cancel_update) referenced from ota_service.o(i.ota_regist_upgrade)
 <LI><a href="#[90]">cli_main</a> from cli.o(i.cli_main) referenced from cli.o(i.aos_cli_init)
 <LI><a href="#[1f]">def_smart_config_result_cb</a> from netmgr.o(i.def_smart_config_result_cb) referenced 2 times from netmgr.o(.data)
 <LI><a href="#[1d]">def_smart_config_start</a> from netmgr.o(i.def_smart_config_start) referenced 2 times from netmgr.o(.data)
 <LI><a href="#[1e]">def_smart_config_stop</a> from netmgr.o(i.def_smart_config_stop) referenced 2 times from netmgr.o(.data)
 <LI><a href="#[cc]">devname_cmd</a> from cli.o(i.devname_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[b0]">do_update</a> from ota_service.o(i.do_update) referenced from ota_service.o(i.ota_regist_upgrade)
 <LI><a href="#[cd]">dumpsys_cmd</a> from cli.o(i.dumpsys_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[95]">dyn_mem_proc_task</a> from k_dyn_mem_proc.o(i.dyn_mem_proc_task) referenced from k_dyn_mem_proc.o(i.dyn_mem_proc_task_start)
 <LI><a href="#[c9]">echo_cmd</a> from cli.o(i.echo_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[bb]">event_close</a> from device.o(i.event_close) referenced from device.o(.constdata)
 <LI><a href="#[ab]">event_handle_mqtt</a> from mqtt-example-b_l475e.o(i.event_handle_mqtt) referenced from mqtt-example-b_l475e.o(i.mqtt_client_example)
 <LI><a href="#[be]">event_ioctl</a> from device.o(i.event_ioctl) referenced from device.o(.constdata)
 <LI><a href="#[ba]">event_open</a> from device.o(i.event_open) referenced from device.o(.constdata)
 <LI><a href="#[bf]">event_poll</a> from device.o(i.event_poll) referenced from device.o(.constdata)
 <LI><a href="#[bc]">event_read</a> from device.o(i.event_read) referenced from device.o(.constdata)
 <LI><a href="#[91]">event_read_cb</a> from local_event.o(i.event_read_cb) referenced from local_event.o(i.aos_event_service_init)
 <LI><a href="#[bd]">event_write</a> from device.o(i.event_write) referenced from device.o(.constdata)
 <LI><a href="#[ca]">exit_cmd</a> from cli.o(i.exit_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[8c]">fputc</a> from soc_init.o(i.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[8c]">fputc</a> from soc_init.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[8c]">fputc</a> from soc_init.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[b]">get_ip_stat</a> from wifi_port.o(i.get_ip_stat) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[c]">get_link_stat</a> from wifi_port.o(i.get_link_stat) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[a2]">get_no_padding</a> from cipher.o(i.get_no_padding) referenced from cipher.o(i.mbedtls_cipher_set_padding_mode)
 <LI><a href="#[1a]">handle_kv_cmd</a> from kvmgr.o(i.handle_kv_cmd) referenced 2 times from kvmgr.o(.data)
 <LI><a href="#[1c]">handle_netmgr_cmd</a> from netmgr.o(i.handle_netmgr_cmd) referenced 2 times from netmgr.o(.data)
 <LI><a href="#[c7]">help_cmd</a> from cli.o(i.help_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[9d]">idle_task</a> from k_idle.o(i.idle_task) referenced from k_sys.o(i.krhino_init)
 <LI><a href="#[9b]">iotx_net_connect</a> from utils_net.o(i.iotx_net_connect) referenced from utils_net.o(i.iotx_net_init)
 <LI><a href="#[9a]">iotx_net_disconnect</a> from utils_net.o(i.iotx_net_disconnect) referenced from utils_net.o(i.iotx_net_init)
 <LI><a href="#[84]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[9c]">json_get_value_by_name_cb</a> from json_parser.o(i.json_get_value_by_name_cb) referenced from json_parser.o(i.json_get_value_by_name)
 <LI><a href="#[94]">krhino_task_deathbed</a> from k_task.o(i.krhino_task_deathbed) referenced from port_c.o(i.cpu_task_stack_init)
 <LI><a href="#[d2]">log_cmd</a> from cli.o(i.log_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[d3]">mac_cmd</a> from cli.o(i.mac_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[7e]">main</a> from aos.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[dd]">mbedtls_md5</a> from md5.o(i.mbedtls_md5) referenced from md_wrap.o(.constdata)
 <LI><a href="#[8a]">mbedtls_net_recv</a> from mbedtls_net.o(i.mbedtls_net_recv) referenced from hal_tls_mbedtls.o(i.TLSConnectNetwork)
 <LI><a href="#[89]">mbedtls_net_recv_timeout</a> from mbedtls_net.o(i.mbedtls_net_recv_timeout) referenced from hal_tls_mbedtls.o(i.TLSConnectNetwork)
 <LI><a href="#[8b]">mbedtls_net_send</a> from mbedtls_net.o(i.mbedtls_net_send) referenced from hal_tls_mbedtls.o(i.TLSConnectNetwork)
 <LI><a href="#[e5]">mbedtls_sha1</a> from sha1.o(i.mbedtls_sha1) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e0]">md5_clone_wrap</a> from md_wrap.o(i.md5_clone_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[de]">md5_ctx_alloc</a> from md_wrap.o(i.md5_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[df]">md5_ctx_free</a> from md_wrap.o(i.md5_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[dc]">md5_finish_wrap</a> from md_wrap.o(i.md5_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e1]">md5_process_wrap</a> from md_wrap.o(i.md5_process_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[da]">md5_starts_wrap</a> from md_wrap.o(i.md5_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[db]">md5_update_wrap</a> from md_wrap.o(i.md5_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[8f]">myrand</a> from rsa.o(i.myrand) referenced from rsa.o(i.ali_rsa_public_encrypt)
 <LI><a href="#[c0]">netmgr_connect_fail_event</a> from netmgr.o(i.netmgr_connect_fail_event) referenced from netmgr.o(.constdata)
 <LI><a href="#[ad]">netmgr_events_executor</a> from netmgr.o(i.netmgr_events_executor) referenced from netmgr.o(i.netmgr_init)
 <LI><a href="#[c6]">netmgr_fatal_err_event</a> from netmgr.o(i.netmgr_fatal_err_event) referenced from netmgr.o(.constdata)
 <LI><a href="#[c1]">netmgr_ip_got_event</a> from netmgr.o(i.netmgr_ip_got_event) referenced from netmgr.o(.constdata)
 <LI><a href="#[c5]">netmgr_para_chg_event</a> from netmgr.o(i.netmgr_para_chg_event) referenced from netmgr.o(.constdata)
 <LI><a href="#[c4]">netmgr_scan_adv_completed_event</a> from netmgr.o(i.netmgr_scan_adv_completed_event) referenced from netmgr.o(.constdata)
 <LI><a href="#[c3]">netmgr_scan_completed_event</a> from netmgr.o(i.netmgr_scan_completed_event) referenced from netmgr.o(.constdata)
 <LI><a href="#[c2]">netmgr_stat_chg_event</a> from netmgr.o(i.netmgr_stat_chg_event) referenced from netmgr.o(.constdata)
 <LI><a href="#[d0]">ota_cmd</a> from cli.o(i.ota_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[af]">ota_download_start</a> from ota_update_manifest.o(i.ota_download_start) referenced from ota_update_manifest.o(i.ota_do_update_packet)
 <LI><a href="#[b8]">ota_hal_finish_cb</a> from ota_service.o(i.ota_hal_finish_cb) referenced from ota_service.o(i.update_action)
 <LI><a href="#[b9]">ota_hal_write_cb</a> from ota_service.o(i.ota_hal_write_cb) referenced from ota_service.o(i.update_action)
 <LI><a href="#[b2]">ota_service_event</a> from ota_service.o(i.ota_service_event) referenced from ota_service.o(i.ota_service_init)
 <LI><a href="#[f]">power_off</a> from wifi_port.o(i.power_off) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[10]">power_on</a> from wifi_port.o(i.power_on) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[ce]">reboot_cmd</a> from cli.o(i.reboot_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[17]">register_monitor_cb</a> from wifi_port.o(i.register_monitor_cb) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[18]">register_wlan_mgnt_monitor_cb</a> from wifi_port.o(i.register_wlan_mgnt_monitor_cb) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[fa]">rsa_alloc_wrap</a> from pk_wrap.o(i.rsa_alloc_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[f5]">rsa_can_do</a> from pk_wrap.o(i.rsa_can_do) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[fc]">rsa_debug_wrap</a> from pk_wrap.o(i.rsa_debug_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[f8]">rsa_decrypt_wrap</a> from pk_wrap.o(i.rsa_decrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[f9]">rsa_encrypt_wrap</a> from pk_wrap.o(i.rsa_encrypt_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[fb]">rsa_free_wrap</a> from pk_wrap.o(i.rsa_free_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[f4]">rsa_get_bitlen</a> from pk_wrap.o(i.rsa_get_bitlen) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[f7]">rsa_sign_wrap</a> from pk_wrap.o(i.rsa_sign_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[f6]">rsa_verify_wrap</a> from pk_wrap.o(i.rsa_verify_wrap) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[14]">set_channel</a> from wifi_port.o(i.set_channel) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[e8]">sha1_clone_wrap</a> from md_wrap.o(i.sha1_clone_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e6]">sha1_ctx_alloc</a> from md_wrap.o(i.sha1_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e7]">sha1_ctx_free</a> from md_wrap.o(i.sha1_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e4]">sha1_finish_wrap</a> from md_wrap.o(i.sha1_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e9]">sha1_process_wrap</a> from md_wrap.o(i.sha1_process_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e2]">sha1_starts_wrap</a> from md_wrap.o(i.sha1_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[e3]">sha1_update_wrap</a> from md_wrap.o(i.sha1_update_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[f0]">sha224_clone_wrap</a> from md_wrap.o(i.sha224_clone_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[ee]">sha224_ctx_alloc</a> from md_wrap.o(i.sha224_ctx_alloc) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[ef]">sha224_ctx_free</a> from md_wrap.o(i.sha224_ctx_free) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[ec]">sha224_finish_wrap</a> from md_wrap.o(i.sha224_finish_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[f1]">sha224_process_wrap</a> from md_wrap.o(i.sha224_process_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[ea]">sha224_starts_wrap</a> from md_wrap.o(i.sha224_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[eb]">sha224_update_wrap</a> from md_wrap.o(i.sha224_update_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[ed]">sha224_wrap</a> from md_wrap.o(i.sha224_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[f2]">sha256_starts_wrap</a> from md_wrap.o(i.sha256_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[f3]">sha256_wrap</a> from md_wrap.o(i.sha256_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[1b]">show_version</a> from version.o(i.show_version) referenced 2 times from version.o(.data)
 <LI><a href="#[2]">soc_err_proc</a> from soc_impl.o(i.soc_err_proc) referenced 2 times from soc_impl.o(.data)
 <LI><a href="#[a9]">ssl_calc_finished_tls_sha256</a> from ssl_tls.o(i.ssl_calc_finished_tls_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[a8]">ssl_calc_verify_tls_sha256</a> from ssl_tls.o(i.ssl_calc_verify_tls_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[aa]">ssl_update_checksum_sha256</a> from ssl_tls.o(i.ssl_update_checksum_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
 <LI><a href="#[b5]">ssl_update_checksum_start</a> from ssl_tls.o(i.ssl_update_checksum_start) referenced from ssl_tls.o(i.ssl_handshake_init)
 <LI><a href="#[15]">start_monitor</a> from wifi_port.o(i.start_monitor) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[d]">start_scan</a> from wifi_port.o(i.start_scan) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[e]">start_scan_adv</a> from wifi_port.o(i.start_scan_adv) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[3]">stm32l475_ota_init</a> from ota_port.o(i.stm32l475_ota_init) referenced 2 times from ota_port.o(.data)
 <LI><a href="#[5]">stm32l475_ota_read</a> from ota_port.o(i.stm32l475_ota_read) referenced 2 times from ota_port.o(.data)
 <LI><a href="#[6]">stm32l475_ota_set_boot</a> from ota_port.o(i.stm32l475_ota_set_boot) referenced 2 times from ota_port.o(.data)
 <LI><a href="#[4]">stm32l475_ota_write</a> from ota_port.o(i.stm32l475_ota_write) referenced 2 times from ota_port.o(.data)
 <LI><a href="#[16]">stop_monitor</a> from wifi_port.o(i.stop_monitor) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[11]">suspend</a> from wifi_port.o(i.suspend) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[13]">suspend_soft_ap</a> from wifi_port.o(i.suspend_soft_ap) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[12]">suspend_station</a> from wifi_port.o(i.suspend_station) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[b6]">sys_init</a> from aos.o(i.sys_init) referenced from aos.o(i.sys_start)
 <LI><a href="#[cb]">task_cmd</a> from cli.o(i.task_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[ae]">tftp_ota_thread</a> from cli.o(i.tftp_ota_thread) referenced from cli.o(i.ota_cmd)
 <LI><a href="#[22]">threading_mutex_dummy</a> from threading.o(i.threading_mutex_dummy) referenced 4 times from threading.o(.data)
 <LI><a href="#[23]">threading_mutex_fail</a> from threading.o(i.threading_mutex_fail) referenced 4 times from threading.o(.data)
 <LI><a href="#[9f]">timer_task</a> from k_timer.o(i.timer_task) referenced from k_timer.o(i.ktimer_init)
 <LI><a href="#[a7]">tls_prf_sha256</a> from ssl_tls.o(i.tls_prf_sha256) referenced from ssl_tls.o(i.mbedtls_ssl_derive_keys)
 <LI><a href="#[cf]">uptime_cmd</a> from cli.o(i.uptime_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[98]">utils_net_read</a> from utils_net.o(i.utils_net_read) referenced from utils_net.o(i.iotx_net_init)
 <LI><a href="#[99]">utils_net_write</a> from utils_net.o(i.utils_net_write) referenced from utils_net.o(i.iotx_net_init)
 <LI><a href="#[c8]">version_cmd</a> from cli.o(i.version_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[b4]">vfs_poll_notify</a> from vfs.o(i.vfs_poll_notify) referenced from vfs.o(i.pre_poll)
 <LI><a href="#[d1]">wifi_debug_cmd</a> from cli.o(i.wifi_debug_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[8]">wifi_get_mac_addr</a> from wifi_port.o(i.wifi_get_mac_addr) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[7]">wifi_init</a> from wifi_port.o(i.wifi_init) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[93]">wifi_service_event</a> from mqtt-example-b_l475e.o(i.wifi_service_event) referenced from mqtt-example-b_l475e.o(i.application_start)
 <LI><a href="#[9]">wifi_start</a> from wifi_port.o(i.wifi_start) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[a]">wifi_start_adv</a> from wifi_port.o(i.wifi_start_adv) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[19]">wlan_send_80211_raw_frame</a> from wifi_port.o(i.wlan_send_80211_raw_frame) referenced 2 times from wifi_port.o(.data)
 <LI><a href="#[9e]">worker_task</a> from k_workqueue.o(i.worker_task) referenced from k_workqueue.o(i.krhino_workqueue_create)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[80]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(.text)
</UL>
<P><STRONG><a name="[53b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[fd]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[53c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[53d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[53e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[53f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[540]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[24]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx_armcc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[32a]"></a>cpu_intrpt_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_c_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_stack_cur_free
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_set
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_update
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_is_exist
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_owner_attach
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>

<P><STRONG><a name="[32b]"></a>cpu_intrpt_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_c_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_stack_cur_free
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_set
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_update
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_is_exist
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_owner_attach
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>

<P><STRONG><a name="[3cb]"></a>cpu_first_task_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_c_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
</UL>

<P><STRONG><a name="[32d]"></a>cpu_task_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_c_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>

<P><STRONG><a name="[3b8]"></a>cpu_intrpt_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_c_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
</UL>

<P><STRONG><a name="[2c]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_c_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; krhino_stack_ovf_check &rArr; k_err_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_stack_ovf_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_update
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_check
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[541]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>

<P><STRONG><a name="[26c]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avRandom
</UL>

<P><STRONG><a name="[542]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[543]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[544]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_SendData
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_ReceiveData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Cmd
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_headlen_decompress
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetModuleName
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_set_name
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_subInfo_to
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Update
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_get_info
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_url
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_host
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_response
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_hmac_signature
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_authenticate_string
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha1_update
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha1
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_append
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_init_pubkey
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc_alt
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec_alt
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</UL>

<P><STRONG><a name="[2f0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_base64enc
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
</UL>

<P><STRONG><a name="[377]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
</UL>

<P><STRONG><a name="[545]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[546]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[547]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_bitmask_set
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[548]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[549]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_print_cb
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_malloc_internal
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_ota_version
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_dev_version
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_download_url
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_do_update_packet
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_secure_mode_str
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_response
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wifi_ssid
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bssid
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wifi_ssid
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_alt
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_alt
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc_alt
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
</UL>

<P><STRONG><a name="[1d2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_DNS_resolution
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_open
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mqtt_publish
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_status_post
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_result_post
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_md5
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_if_need
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_action
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value_by_name
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotId_iotToken_http
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ident_partner
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_response
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_hmac_signature
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha1_init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha1
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_device_info_set
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_device_info_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_init
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_ssid
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconnect_wifi
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wifi_ssid
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_reset
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init_alt
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free_alt
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init_alt
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>

<P><STRONG><a name="[54a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[267]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_authenticate_http_url
</UL>

<P><STRONG><a name="[11f]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Cmd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_TCP_IsConnected
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_IsConnected
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_GetOperationMode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_url
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_host
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_conn_string
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[121]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_GetModuleFwRevision
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_download_url
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_parse_response
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_do_update_packet
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_openlog
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_device_info_set
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_set_ap_config
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_ssid
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconnect_wifi
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_netmgr_cmd
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wifi_ssid
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_smart_config_start
</UL>

<P><STRONG><a name="[1c9]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_gethost_info
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_url
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_host
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_next_object
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_multi_line_internal
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[1ae]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_find_cb
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_set_name
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Unsubscribe
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Subscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_rule
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_handle_is_identical
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_init
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_connect
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_gethost_info
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mqtt_publish
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_if_need
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_post_version_msg
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_update
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_action
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_SetupConnInfo
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_auth
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_get_info
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_url
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_name_value
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value_by_name
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_next_object
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_multi_line_internal
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ident_partner
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_response
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_hmac_signature
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_putstr
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_valid_ap
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrand
</UL>

<P><STRONG><a name="[33a]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack_byname
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_func
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_command
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_cmd
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_set_ap_config
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_access_security
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_access_security
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_netmgr_cmd
</UL>

<P><STRONG><a name="[25a]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_update
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_find_cb
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>

<P><STRONG><a name="[27d]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotId_iotToken_http
</UL>

<P><STRONG><a name="[1fe]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_handle_is_identical
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_gethost_info
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_md5
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_if_need
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_if_cancel
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_parse_response
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_post_version_msg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value_by_name_cb
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_next_object
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_command
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
</UL>

<P><STRONG><a name="[38b]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_parse_response
</UL>

<P><STRONG><a name="[4c9]"></a>strerror</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
</UL>

<P><STRONG><a name="[106]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_addr
</UL>

<P><STRONG><a name="[108]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[11c]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[10a]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_gethost_info
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotId_iotToken_http
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[256]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[54b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[54c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[54d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[107]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[81]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[54e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[10f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[257]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[54f]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fe]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[550]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[84]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[118]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[11d]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[551]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[552]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>BSP_COM_Init</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, stm32l475e_iot01.o(i.BSP_COM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_COM_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[128]"></a>BSP_LED_Init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stm32l475e_iot01.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[129]"></a>BSP_LED_Toggle</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l475e_iot01.o(i.BSP_LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[12b]"></a>BSP_PB_Init</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, stm32l475e_iot01.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_PB_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[28]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>CRC16_Final</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, checksumutils.o(i.CRC16_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16_Final &rArr; UpdateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_set_boot
</UL>

<P><STRONG><a name="[51e]"></a>CRC16_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, checksumutils.o(i.CRC16_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_write
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_init
</UL>

<P><STRONG><a name="[12e]"></a>CRC16_Update</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, checksumutils.o(i.CRC16_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CRC16_Update &rArr; UpdateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_write
</UL>

<P><STRONG><a name="[2b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>Error_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, soc_init.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Error_Handler &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_printf
</UL>

<P><STRONG><a name="[14b]"></a>FLASH_FlushCaches</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[14a]"></a>FLASH_PageErase</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[133]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32l4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROPConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
</UL>

<P><STRONG><a name="[139]"></a>FLASH_bank1_enabled</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, flash_l4.o(i.FLASH_bank1_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FLASH_bank1_enabled &rArr; HAL_FLASHEx_OBGetConfig &rArr; FLASH_OB_GetPCROP
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_write
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_read
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
</UL>

<P><STRONG><a name="[142]"></a>FLASH_get_bank</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, flash_l4.o(i.FLASH_get_bank))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
</UL>

<P><STRONG><a name="[143]"></a>FLASH_get_pageInBank</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, flash_l4.o(i.FLASH_get_pageInBank))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_get_pageInBank
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
</UL>

<P><STRONG><a name="[34f]"></a>FLASH_read_at</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, flash_l4.o(i.FLASH_read_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_read_at
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
</UL>

<P><STRONG><a name="[13d]"></a>FLASH_set_boot_bank</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, flash_l4.o(i.FLASH_set_boot_bank))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FLASH_set_boot_bank &rArr; HAL_FLASHEx_OBProgram &rArr; FLASH_OB_PCROPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Unlock
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_switch_to_new_fw
</UL>

<P><STRONG><a name="[141]"></a>FLASH_unlock_erase</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, flash_l4.o(i.FLASH_unlock_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FLASH_unlock_erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_get_pageInBank
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_get_bank
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
</UL>

<P><STRONG><a name="[145]"></a>FLASH_update</STRONG> (Thumb, 186 bytes, Stack size 2088 bytes, flash_l4.o(i.FLASH_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write_at
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
</UL>

<P><STRONG><a name="[147]"></a>FLASH_write_at</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, flash_l4.o(i.FLASH_write_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
</UL>

<P><STRONG><a name="[193]"></a>HAL_DMA_Abort</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
</UL>

<P><STRONG><a name="[199]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Delay
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[144]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, stm32l4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
</UL>

<P><STRONG><a name="[13c]"></a>HAL_FLASHEx_OBGetConfig</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32l4xx_hal_flash_ex.o(i.HAL_FLASHEx_OBGetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_FLASHEx_OBGetConfig &rArr; FLASH_OB_GetPCROP
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetWRP
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetUser
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetRDP
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetPCROP
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_set_boot_bank
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_bank1_enabled
</UL>

<P><STRONG><a name="[13e]"></a>HAL_FLASHEx_OBProgram</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32l4xx_hal_flash_ex.o(i.HAL_FLASHEx_OBProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASHEx_OBProgram &rArr; FLASH_OB_PCROPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROPConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_set_boot_bank
</UL>

<P><STRONG><a name="[140]"></a>HAL_FLASH_OB_Launch</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_OB_Launch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_FLASH_OB_Launch &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_set_boot_bank
</UL>

<P><STRONG><a name="[13b]"></a>HAL_FLASH_OB_Unlock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_OB_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_set_boot_bank
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_bank1_enabled
</UL>

<P><STRONG><a name="[148]"></a>HAL_FLASH_Program</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write_at
</UL>

<P><STRONG><a name="[13a]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_set_boot_bank
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_bank1_enabled
</UL>

<P><STRONG><a name="[152]"></a>HAL_Free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_os_rhino.o(i.HAL_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = HAL_Free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
</UL>

<P><STRONG><a name="[153]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, soc_init.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>HAL_GPIO_Init</STRONG> (Thumb, 484 bytes, Stack size 20 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_MspInit
</UL>

<P><STRONG><a name="[12a]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[27a]"></a>HAL_GetPartnerID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_os_rhino.o(i.HAL_GetPartnerID))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ident_partner
</UL>

<P><STRONG><a name="[137]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[221]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[155]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[157]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[15a]"></a>HAL_Malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_os_rhino.o(i.HAL_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HAL_Malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
</UL>

<P><STRONG><a name="[158]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[15b]"></a>HAL_MutexCreate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_os_rhino.o(i.HAL_MutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_MutexCreate &rArr; aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
</UL>

<P><STRONG><a name="[15d]"></a>HAL_MutexDestroy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_os_rhino.o(i.HAL_MutexDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HAL_MutexDestroy &rArr; aos_mutex_free &rArr; krhino_mutex_del &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_release
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
</UL>

<P><STRONG><a name="[15f]"></a>HAL_MutexLock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_os_rhino.o(i.HAL_MutexLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HAL_MutexLock &rArr; aos_mutex_lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_subInfo_to
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_subInfo_from
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_pubInfo_from
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_UNSUBACK
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_next_packetid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubInfoProc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRePublish
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[161]"></a>HAL_MutexUnlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_os_rhino.o(i.HAL_MutexUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HAL_MutexUnlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_subInfo_to
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_subInfo_from
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_pubInfo_from
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_UNSUBACK
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_next_packetid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubInfoProc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRePublish
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[127]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_MspInit
</UL>

<P><STRONG><a name="[126]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_MspInit
</UL>

<P><STRONG><a name="[156]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[359]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reboot
</UL>

<P><STRONG><a name="[226]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[21f]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[165]"></a>HAL_Printf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, hal_os_rhino.o(i.HAL_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_demo_message_arrive
</UL>

<P><STRONG><a name="[227]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_EnableMSIPLLMode))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[167]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1230 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[16a]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[16d]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[16c]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[16e]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[16b]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 356 bytes, Stack size 20 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[16f]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1598 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[171]"></a>HAL_RNG_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32l4xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[172]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[173]"></a>HAL_RTC_Init</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[174]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[176]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[17a]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[179]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[17b]"></a>HAL_SSL_Destroy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_tls_mbedtls.o(i.HAL_SSL_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = HAL_SSL_Destroy &rArr; utils_network_ssl_disconnect &rArr; mbedtls_net_free &rArr; WIFI_CloseClientConnection &rArr; M0_WIFI_StopConn &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_disconnect
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_ssl
</UL>

<P><STRONG><a name="[17e]"></a>HAL_SSL_Establish</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, hal_tls_mbedtls.o(i.HAL_SSL_Establish))
<BR><BR>[Stack]<UL><LI>Max Depth = 2996 + Unknown Stack Size
<LI>Call Chain = HAL_SSL_Establish &rArr; TLSConnectNetwork &rArr; _ssl_client_init &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_crypt_cbc_alt &rArr; ali_aes_init &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_disconnect
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ssl
</UL>

<P><STRONG><a name="[183]"></a>HAL_SSL_Read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, hal_tls_mbedtls.o(i.HAL_SSL_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = HAL_SSL_Read &rArr; utils_network_ssl_read &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ssl
</UL>

<P><STRONG><a name="[185]"></a>HAL_SSL_Write</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, hal_tls_mbedtls.o(i.HAL_SSL_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = HAL_SSL_Write &rArr; utils_network_ssl_write &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_write
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ssl
</UL>

<P><STRONG><a name="[159]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[187]"></a>HAL_SleepMs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_os_rhino.o(i.HAL_SleepMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = HAL_SleepMs &rArr; aos_msleep &rArr; krhino_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_release
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
</UL>

<P><STRONG><a name="[189]"></a>HAL_TCP_Destroy</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_tcp_rhino.o(i.HAL_TCP_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HAL_TCP_Destroy &rArr; WIFI_CloseClientConnection &rArr; M0_WIFI_StopConn &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_CloseClientConnection
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_tcp
</UL>

<P><STRONG><a name="[18b]"></a>HAL_TCP_Establish</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, hal_tcp_rhino.o(i.HAL_TCP_Establish))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = HAL_TCP_Establish &rArr; WIFI_OpenClientConnection &rArr; M0_WIFI_StartClientConnection &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_OpenClientConnection
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetHostAddress
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_tcp
</UL>

<P><STRONG><a name="[18e]"></a>HAL_TCP_Read</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, hal_tcp_rhino.o(i.HAL_TCP_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = HAL_TCP_Read &rArr; WIFI_ReceiveData &rArr; M0_WIFI_ReceiveData &rArr; UART_WIFI_ReceiveData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ReceiveData
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcp
</UL>

<P><STRONG><a name="[190]"></a>HAL_TCP_Write</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, hal_tcp_rhino.o(i.HAL_TCP_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = HAL_TCP_Write &rArr; WIFI_SendData &rArr; M0_WIFI_SendData &rArr; UART_WIFI_SendData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendData
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tcp
</UL>

<P><STRONG><a name="[19b]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>HAL_UART_AbortReceive</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_AbortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_AbortReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxIdleCallback
</UL>

<P><STRONG><a name="[194]"></a>HAL_UART_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_DeInit
</UL>

<P><STRONG><a name="[19a]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[196]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; USART3_RxCpltCallback &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxIdleCallback
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>HAL_UART_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Init
</UL>

<P><STRONG><a name="[195]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[19f]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[23a]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_SendData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Cmd
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, soc_init.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; USART3_RxCpltCallback &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[19e]"></a>HAL_UART_RxIdleCallback</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, m0_wifi_io.o(i.HAL_UART_RxIdleCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_RxIdleCallback &rArr; HAL_UART_AbortReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_UART_Transmit</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_SendData
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_printf
</UL>

<P><STRONG><a name="[35a]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, soc_init.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; USART3_TxCpltCallback &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_UptimeMs</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_os_rhino.o(i.HAL_UptimeMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_spend
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_start
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
</UL>

<P><STRONG><a name="[26]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[1ac]"></a>IOT_MQTT_Construct</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, mqtt_client.o(i.IOT_MQTT_Construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = IOT_MQTT_Construct &rArr; iotx_mc_init &rArr; list_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_malloc_internal
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_internal
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_release
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_connect
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
</UL>

<P><STRONG><a name="[1b4]"></a>IOT_MQTT_Destroy</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, mqtt_client.o(i.IOT_MQTT_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = IOT_MQTT_Destroy &rArr; iotx_mc_release &rArr; iotx_mc_disconnect &rArr; MQTTDisconnect &rArr; iotx_mc_send_packet &rArr; iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_internal
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_release
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
</UL>

<P><STRONG><a name="[1b5]"></a>IOT_MQTT_Publish</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, mqtt_client.o(i.IOT_MQTT_Publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = IOT_MQTT_Publish &rArr; iotx_mc_publish &rArr; MQTTPublish &rArr; iotx_mc_push_pubInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_publish
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mqtt_publish
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_demo_message_arrive
</UL>

<P><STRONG><a name="[1b7]"></a>IOT_MQTT_Subscribe</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, mqtt_client.o(i.IOT_MQTT_Subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = IOT_MQTT_Subscribe &rArr; iotx_mc_subscribe &rArr; MQTTSubscribe &rArr; iotx_mc_push_subInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_subscribe
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_subscribe_upgrade
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
</UL>

<P><STRONG><a name="[1b9]"></a>IOT_MQTT_Unsubscribe</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, mqtt_client.o(i.IOT_MQTT_Unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = IOT_MQTT_Unsubscribe &rArr; iotx_mc_unsubscribe &rArr; MQTTUnsubscribe &rArr; iotx_mc_push_subInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_unsubscribe
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
</UL>

<P><STRONG><a name="[1bb]"></a>IOT_MQTT_Yield</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, mqtt_client.o(i.IOT_MQTT_Yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 3216 + Unknown Stack Size
<LI>Call Chain = IOT_MQTT_Yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubInfoProc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_status_post
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
</UL>

<P><STRONG><a name="[1c3]"></a>IOT_SetupConnInfo</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, sdk-impl.o(i.IOT_SetupConnInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 3176 + Unknown Stack Size
<LI>Call Chain = IOT_SetupConnInfo &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_device_info_set
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_device_info_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_conn_info_get
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
</UL>

<P><STRONG><a name="[1b1]"></a>LITE_free_internal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mem_stats.o(i.LITE_free_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = LITE_free_internal &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_destroy
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_destroy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_routine
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Destroy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_release
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotId_iotToken_http
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_response
</UL>

<P><STRONG><a name="[97]"></a>LITE_free_routine</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mem_stats.o(i.LITE_free_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = LITE_free_routine &rArr; LITE_free_internal &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_client.o(i.iotx_mc_init)
</UL>
<P><STRONG><a name="[1ce]"></a>LITE_get_loglevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lite-log.o(i.LITE_get_loglevel))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_multi_line_internal
</UL>

<P><STRONG><a name="[1cd]"></a>LITE_get_logname</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lite-log.o(i.LITE_get_logname))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
</UL>

<P><STRONG><a name="[1c8]"></a>LITE_json_value_of</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, json_token.o(i.LITE_json_value_of))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = LITE_json_value_of &rArr; json_get_value_by_name &rArr; json_parse_name_value &rArr; json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_malloc_internal
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_internal
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value_by_name
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotId_iotToken_http
</UL>

<P><STRONG><a name="[1af]"></a>LITE_malloc_internal</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, mem_stats.o(i.LITE_malloc_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_node_new
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_new
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_subInfo_to
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new_from_node
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_response
</UL>

<P><STRONG><a name="[1cc]"></a>LITE_openlog</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lite-log.o(i.LITE_openlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LITE_openlog &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[30a]"></a>LITE_set_loglevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lite-log.o(i.LITE_set_loglevel))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[1ad]"></a>LITE_syslog</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, lite-log.o(i.LITE_syslog))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LITE_syslog &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_logname
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_loglevel
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_destroy
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_destroy
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_routine
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Yield
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Unsubscribe
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Subscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Destroy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_unsubscribe
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_subscribe
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_connect_params
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_release
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_subInfo_to
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_publish
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_subInfo_from
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_pubInfo_from
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_CONNACK
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_disconnect
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_connect
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_rule
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_attempt_reconnect
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubInfoProc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_SetupConnInfo
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ssl
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ssl
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_ssl
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_tcp
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ssl
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_userdata
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_request
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_auth
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_url
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_host
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_conn
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_name_value
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotId_iotToken_http
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_response
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_hmac_signature
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_device_info_set
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_device_info_init
</UL>

<P><STRONG><a name="[1d0]"></a>M0_WIFI_Connect</STRONG> (Thumb, 38 bytes, Stack size 136 bytes, m0_wifi.o(i.M0_WIFI_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = M0_WIFI_Connect &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Disconnect
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Connect
</UL>

<P><STRONG><a name="[1d1]"></a>M0_WIFI_DNS_resolution</STRONG> (Thumb, 92 bytes, Stack size 152 bytes, m0_wifi.o(i.M0_WIFI_DNS_resolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = M0_WIFI_DNS_resolution &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseIP
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetHostAddress
</UL>

<P><STRONG><a name="[1d4]"></a>M0_WIFI_EnterCmdMode</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, m0_wifi.o(i.M0_WIFI_EnterCmdMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M0_WIFI_EnterCmdMode &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_SetTransMode
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_Init
</UL>

<P><STRONG><a name="[1d5]"></a>M0_WIFI_GetMACAddress</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, m0_wifi.o(i.M0_WIFI_GetMACAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = M0_WIFI_GetMACAddress &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Num
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetMAC_Address
</UL>

<P><STRONG><a name="[1d7]"></a>M0_WIFI_GetModuleFwRevision</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, m0_wifi.o(i.M0_WIFI_GetModuleFwRevision))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M0_WIFI_GetModuleFwRevision &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetModuleFwRevision
</UL>

<P><STRONG><a name="[1d8]"></a>M0_WIFI_GetOperationMode</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, m0_wifi.o(i.M0_WIFI_GetOperationMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M0_WIFI_GetOperationMode &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Connect
</UL>

<P><STRONG><a name="[1d9]"></a>M0_WIFI_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m0_wifi.o(i.M0_WIFI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = M0_WIFI_Init &rArr; M0_WIFI_SetTransMode &rArr; M0_WIFI_SaveAndReset &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_DeInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_SetTransMode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_EnterCmdMode
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Init
</UL>

<P><STRONG><a name="[1dd]"></a>M0_WIFI_IsConnected</STRONG> (Thumb, 34 bytes, Stack size 112 bytes, m0_wifi.o(i.M0_WIFI_IsConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = M0_WIFI_IsConnected &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Connect
</UL>

<P><STRONG><a name="[1de]"></a>M0_WIFI_ReceiveData</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, m0_wifi.o(i.M0_WIFI_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = M0_WIFI_ReceiveData &rArr; UART_WIFI_ReceiveData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ReceiveData
</UL>

<P><STRONG><a name="[1e0]"></a>M0_WIFI_SaveAndReset</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, m0_wifi.o(i.M0_WIFI_SaveAndReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M0_WIFI_SaveAndReset &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Delay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_SetTransMode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_OpenClientConnection
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Disconnect
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Connect
</UL>

<P><STRONG><a name="[1e1]"></a>M0_WIFI_SendData</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, m0_wifi.o(i.M0_WIFI_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = M0_WIFI_SendData &rArr; UART_WIFI_SendData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendData
</UL>

<P><STRONG><a name="[1e3]"></a>M0_WIFI_SetOperationMode</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, m0_wifi.o(i.M0_WIFI_SetOperationMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = M0_WIFI_SetOperationMode &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Connect
</UL>

<P><STRONG><a name="[1dc]"></a>M0_WIFI_SetTransMode</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, m0_wifi.o(i.M0_WIFI_SetTransMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = M0_WIFI_SetTransMode &rArr; M0_WIFI_SaveAndReset &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_SaveAndReset
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_EnterCmdMode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_Init
</UL>

<P><STRONG><a name="[1e4]"></a>M0_WIFI_StartClientConnection</STRONG> (Thumb, 126 bytes, Stack size 176 bytes, m0_wifi.o(i.M0_WIFI_StartClientConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = M0_WIFI_StartClientConnection &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_OpenClientConnection
</UL>

<P><STRONG><a name="[1e5]"></a>M0_WIFI_StopConn</STRONG> (Thumb, 40 bytes, Stack size 56 bytes, m0_wifi.o(i.M0_WIFI_StopConn))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = M0_WIFI_StopConn &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_CloseClientConnection
</UL>

<P><STRONG><a name="[1e6]"></a>M0_WIFI_TCP_IsConnected</STRONG> (Thumb, 34 bytes, Stack size 112 bytes, m0_wifi.o(i.M0_WIFI_TCP_IsConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = M0_WIFI_TCP_IsConnected &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_OpenClientConnection
</UL>

<P><STRONG><a name="[1e9]"></a>MD5_Final</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, md5.o(i.MD5_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MD5_Final &rArr; MD5_Update &rArr; MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Update
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_md5
</UL>

<P><STRONG><a name="[4c6]"></a>MD5_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, md5.o(i.MD5_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
</UL>

<P><STRONG><a name="[1eb]"></a>MD5_Update</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, md5.o(i.MD5_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MD5_Update &rArr; MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Final
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
</UL>

<P><STRONG><a name="[1ec]"></a>MQTTConnect</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, mqtt_client.o(i.MQTTConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MQTTConnect &rArr; iotx_mc_send_packet &rArr; iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_connect
</UL>

<P><STRONG><a name="[1ef]"></a>MQTTDeserialize_ack</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, mqttdeserializepublish.o(i.MQTTDeserialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_ack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_unsuback
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBACK
</UL>

<P><STRONG><a name="[1f3]"></a>MQTTDeserialize_connack</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, mqttconnectclient.o(i.MQTTDeserialize_connack))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_connack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_CONNACK
</UL>

<P><STRONG><a name="[1f4]"></a>MQTTDeserialize_publish</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, mqttdeserializepublish.o(i.MQTTDeserialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTDeserialize_publish &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
</UL>

<P><STRONG><a name="[1f6]"></a>MQTTDeserialize_suback</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, mqttsubscribeclient.o(i.MQTTDeserialize_suback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_suback &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
</UL>

<P><STRONG><a name="[1f7]"></a>MQTTDeserialize_unsuback</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, mqttunsubscribeclient.o(i.MQTTDeserialize_unsuback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MQTTDeserialize_unsuback &rArr; MQTTDeserialize_ack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_UNSUBACK
</UL>

<P><STRONG><a name="[1fc]"></a>MQTTPacket_decode</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mqttpacket.o(i.MQTTPacket_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>

<P><STRONG><a name="[1f1]"></a>MQTTPacket_decodeBuf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mqttpacket.o(i.MQTTPacket_decodeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[20e]"></a>MQTTPacket_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mqttpacket.o(i.MQTTPacket_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
</UL>

<P><STRONG><a name="[1fd]"></a>MQTTPacket_equals</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mqttpacket.o(i.MQTTPacket_equals))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MQTTPacket_equals &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
</UL>

<P><STRONG><a name="[211]"></a>MQTTPacket_len</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mqttpacket.o(i.MQTTPacket_len))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[20a]"></a>MQTTPublish</STRONG> (Thumb, 262 bytes, Stack size 72 bytes, mqtt_client.o(i.MQTTPublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = MQTTPublish &rArr; iotx_mc_push_pubInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_publish
</UL>

<P><STRONG><a name="[209]"></a>MQTTSerialize_ack</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, mqttserializepublish.o(i.MQTTSerialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MQTTSerialize_ack &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
</UL>

<P><STRONG><a name="[1ed]"></a>MQTTSerialize_connect</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, mqttconnectclient.o(i.MQTTSerialize_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[210]"></a>MQTTSerialize_connectLength</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_connectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MQTTSerialize_connectLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[1f9]"></a>MQTTSerialize_disconnect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MQTTSerialize_disconnect &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[1fb]"></a>MQTTSerialize_pingreq</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_pingreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MQTTSerialize_pingreq &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
</UL>

<P><STRONG><a name="[20b]"></a>MQTTSerialize_publish</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, mqttserializepublish.o(i.MQTTSerialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>

<P><STRONG><a name="[216]"></a>MQTTSerialize_publishLength</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, mqttserializepublish.o(i.MQTTSerialize_publishLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[217]"></a>MQTTSerialize_subscribe</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTSerialize_subscribe &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
</UL>

<P><STRONG><a name="[218]"></a>MQTTSerialize_subscribeLength</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>

<P><STRONG><a name="[219]"></a>MQTTSerialize_unsubscribe</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, mqttunsubscribeclient.o(i.MQTTSerialize_unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTSerialize_unsubscribe &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribeLength
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
</UL>

<P><STRONG><a name="[21a]"></a>MQTTSerialize_unsubscribeLength</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mqttunsubscribeclient.o(i.MQTTSerialize_unsubscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTSerialize_unsubscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
</UL>

<P><STRONG><a name="[215]"></a>MQTTSerialize_zero</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, mqttconnectclient.o(i.MQTTSerialize_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
</UL>

<P><STRONG><a name="[214]"></a>MQTTstrlen</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, mqttpacket.o(i.MQTTstrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribeLength
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
</UL>

<P><STRONG><a name="[27]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[328]"></a>NetCallback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wifi_port.o(i.NetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connet_wifi_ap
</UL>

<P><STRONG><a name="[a5]"></a>OSA_mutex_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbedtls_alt.o(i.OSA_mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OSA_mutex_free &rArr; aos_mutex_free &rArr; krhino_mutex_del &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rsa.o(i.mbedtls_rsa_init)
</UL>
<P><STRONG><a name="[a6]"></a>OSA_mutex_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mbedtls_alt.o(i.OSA_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OSA_mutex_init &rArr; aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rsa.o(i.mbedtls_rsa_init)
</UL>
<P><STRONG><a name="[a4]"></a>OSA_mutex_lock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mbedtls_alt.o(i.OSA_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSA_mutex_lock &rArr; aos_mutex_lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rsa.o(i.mbedtls_rsa_init)
</UL>
<P><STRONG><a name="[a3]"></a>OSA_mutex_unlock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mbedtls_alt.o(i.OSA_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSA_mutex_unlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rsa.o(i.mbedtls_rsa_init)
</UL>
<P><STRONG><a name="[178]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[177]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[175]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[2a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SysTick_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; krhino_tick_proc &rArr; tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(.text)
</UL>
<P><STRONG><a name="[181]"></a>TLSConnectNetwork</STRONG> (Thumb, 618 bytes, Stack size 80 bytes, hal_tls_mbedtls.o(i.TLSConnectNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 2932 + Unknown Stack Size
<LI>Call Chain = TLSConnectNetwork &rArr; _ssl_client_init &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_crypt_cbc_alt &rArr; ali_aes_init &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_verify_result
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_min_version
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_max_version
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_dbg
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ssl_client_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_real_confirm
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Establish
</UL>

<P><STRONG><a name="[62]"></a>UART4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; USART3_RxCpltCallback &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[1a1]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1a2]"></a>UART_CheckIdleState</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1a0]"></a>UART_SetConfig</STRONG> (Thumb, 1156 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[120]"></a>UART_WIFI_Cmd</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, m0_wifi_io.o(i.UART_WIFI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Delay
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_printf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_SendData
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_ReceiveData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
</UL>

<P><STRONG><a name="[1da]"></a>UART_WIFI_DeInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m0_wifi_io.o(i.UART_WIFI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = UART_WIFI_DeInit &rArr; aos_sem_free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_Init
</UL>

<P><STRONG><a name="[122]"></a>UART_WIFI_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m0_wifi_io.o(i.UART_WIFI_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WIFI_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_SendData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Cmd
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_SaveAndReset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ExecuteCommand
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_OpenClientConnection
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Disconnect
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Connect
</UL>

<P><STRONG><a name="[1db]"></a>UART_WIFI_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, m0_wifi_io.o(i.UART_WIFI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = UART_WIFI_Init &rArr; aos_sem_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_Init
</UL>

<P><STRONG><a name="[23c]"></a>UART_WIFI_MspInit</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, m0_wifi_io.o(i.UART_WIFI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_WIFI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Init
</UL>

<P><STRONG><a name="[1df]"></a>UART_WIFI_ReceiveData</STRONG> (Thumb, 170 bytes, Stack size 88 bytes, m0_wifi_io.o(i.UART_WIFI_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = UART_WIFI_ReceiveData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Cmd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_ReceiveData
</UL>

<P><STRONG><a name="[1e2]"></a>UART_WIFI_SendData</STRONG> (Thumb, 244 bytes, Stack size 80 bytes, m0_wifi_io.o(i.UART_WIFI_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = UART_WIFI_SendData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Delay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Cmd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_SendData
</UL>

<P><STRONG><a name="[239]"></a>UART_WIFI_printf</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, m0_wifi_io.o(i.UART_WIFI_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Cmd
</UL>

<P><STRONG><a name="[1a7]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[54]"></a>USART2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; USART3_RxCpltCallback &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART3_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; USART3_RxCpltCallback &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[1a4]"></a>USART3_RxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m0_wifi_io.o(i.USART3_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = USART3_RxCpltCallback &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[1a9]"></a>USART3_TxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m0_wifi_io.o(i.USART3_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = USART3_TxCpltCallback &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[12d]"></a>UpdateCRC16</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, checksumutils.o(i.UpdateCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Update
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Final
</UL>

<P><STRONG><a name="[29]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx_armcc.o(RESET)
</UL>
<P><STRONG><a name="[18a]"></a>WIFI_CloseClientConnection</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wifi.o(i.WIFI_CloseClientConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = WIFI_CloseClientConnection &rArr; M0_WIFI_StopConn &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_StopConn
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_close
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Destroy
</UL>

<P><STRONG><a name="[23f]"></a>WIFI_Connect</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, wifi.o(i.WIFI_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = WIFI_Connect &rArr; M0_WIFI_Connect &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Delay
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_SetOperationMode
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_SaveAndReset
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_IsConnected
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_GetOperationMode
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connet_wifi_ap
</UL>

<P><STRONG><a name="[240]"></a>WIFI_Disconnect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wifi.o(i.WIFI_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = WIFI_Disconnect &rArr; M0_WIFI_Connect &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Delay
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_SaveAndReset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_Connect
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connet_wifi_ap
</UL>

<P><STRONG><a name="[18c]"></a>WIFI_GetHostAddress</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wifi.o(i.WIFI_GetHostAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = WIFI_GetHostAddress &rArr; M0_WIFI_DNS_resolution &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_DNS_resolution
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_connect
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Establish
</UL>

<P><STRONG><a name="[241]"></a>WIFI_GetMAC_Address</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wifi.o(i.WIFI_GetMAC_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = WIFI_GetMAC_Address &rArr; M0_WIFI_GetMACAddress &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_GetMACAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mac_addr
</UL>

<P><STRONG><a name="[242]"></a>WIFI_GetModuleFwRevision</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wifi.o(i.WIFI_GetModuleFwRevision))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = WIFI_GetModuleFwRevision &rArr; M0_WIFI_GetModuleFwRevision &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_GetModuleFwRevision
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi
</UL>

<P><STRONG><a name="[243]"></a>WIFI_GetModuleName</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wifi.o(i.WIFI_GetModuleName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIFI_GetModuleName &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi
</UL>

<P><STRONG><a name="[244]"></a>WIFI_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wifi.o(i.WIFI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = WIFI_Init &rArr; M0_WIFI_Init &rArr; M0_WIFI_SetTransMode &rArr; M0_WIFI_SaveAndReset &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi
</UL>

<P><STRONG><a name="[18d]"></a>WIFI_OpenClientConnection</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, wifi.o(i.WIFI_OpenClientConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = WIFI_OpenClientConnection &rArr; M0_WIFI_StartClientConnection &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Delay
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_TCP_IsConnected
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_StartClientConnection
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_SaveAndReset
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_connect
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Establish
</UL>

<P><STRONG><a name="[18f]"></a>WIFI_ReceiveData</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, wifi.o(i.WIFI_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = WIFI_ReceiveData &rArr; M0_WIFI_ReceiveData &rArr; UART_WIFI_ReceiveData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_ReceiveData
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_recv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_timeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Read
</UL>

<P><STRONG><a name="[191]"></a>WIFI_SendData</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, wifi.o(i.WIFI_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = WIFI_SendData &rArr; M0_WIFI_SendData &rArr; UART_WIFI_SendData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_SendData
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_send
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Write
</UL>

<P><STRONG><a name="[327]"></a>WifiStatusHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wifi_port.o(i.WifiStatusHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WifiStatusHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connet_wifi_ap
</UL>

<P><STRONG><a name="[245]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[553]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[28a]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ssl_debug
</UL>

<P><STRONG><a name="[554]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[555]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[247]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[556]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[13f]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_start_hal
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write_at
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_set_boot_bank
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_start
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_start
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mac_addr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connet_wifi_ap
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handle_mqtt
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_multi_line_internal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_timeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_write
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_read
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_disconnect
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Destroy
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ssl_client_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_real_confirm
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Read
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Establish
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Destroy
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_verify
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_public_encrypt
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_init_pubkey
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_get_pubkey_size
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_reset
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_process
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_get_ctx_size
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_alt
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_alt
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_alt
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_alt
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc_alt
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec_alt
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb_alt
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc_alt
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rand_gen
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ali_rsa_public_encrypt_pre
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ali_get_hash_type
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ali_get_hash_size
</UL>

<P><STRONG><a name="[557]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[558]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[248]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[559]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1cb]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mqtt_gen_topic_name
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_gen_report_msg
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_gen_info_msg
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_md5
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_if_need
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timestamp_string
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_secure_mode_str
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ident_partner
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_response
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_hmac_signature
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_authenticate_http_url
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_device_info_set
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_func
</UL>

<P><STRONG><a name="[55a]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[55b]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[249]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[55c]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[180]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_SendData
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_ReceiveData
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_StopConn
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_StartClientConnection
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_DNS_resolution
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_Connect
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_auth
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Establish
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_authenticate_string
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_info_func
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
</UL>

<P><STRONG><a name="[55d]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[55e]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[24a]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[55f]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[560]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[561]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[166]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
</UL>

<P><STRONG><a name="[24b]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[562]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[563]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[564]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1cf]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_printf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_conn_string
</UL>

<P><STRONG><a name="[258]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[26a]"></a>__aeabi_assert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, armcc_libc.o(i.__aeabi_assert))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_err_proc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotId_iotToken_http
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_response
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_conn_string
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_hmac_signature
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_authenticate_string
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[565]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[24c]"></a>__hardfp_pow</STRONG> (Thumb, 3044 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[255]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[24f]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[24d]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[253]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[250]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[254]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[566]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[567]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[568]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[24e]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[295]"></a>ali_aes_get_ctx_size</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, aes.o(i.ali_aes_get_ctx_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ali_aes_get_ctx_size &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc_alt
</UL>

<P><STRONG><a name="[296]"></a>ali_aes_init</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, aes.o(i.ali_aes_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2468<LI>Call Chain = ali_aes_init &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc_alt
</UL>

<P><STRONG><a name="[29a]"></a>ali_aes_process</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, aes.o(i.ali_aes_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ali_aes_process &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc_alt
</UL>

<P><STRONG><a name="[29e]"></a>ali_aes_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, aes.o(i.ali_aes_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ali_aes_reset &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc_alt
</UL>

<P><STRONG><a name="[2a0]"></a>ali_crypt_rand_word</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ali_crypto_rand.o(i.ali_crypt_rand_word))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rand_gen
</UL>

<P><STRONG><a name="[29f]"></a>ali_rand_gen</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ali_crypto_rand.o(i.ali_rand_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ali_rand_gen &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_crypt_rand_word
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrand
</UL>

<P><STRONG><a name="[2a1]"></a>ali_rsa_get_pubkey_size</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rsa.o(i.ali_rsa_get_pubkey_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ali_rsa_get_pubkey_size &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_alt
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_alt
</UL>

<P><STRONG><a name="[2a2]"></a>ali_rsa_init_pubkey</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rsa.o(i.ali_rsa_init_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ali_rsa_init_pubkey &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_alt
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_alt
</UL>

<P><STRONG><a name="[2a3]"></a>ali_rsa_public_encrypt</STRONG> (Thumb, 604 bytes, Stack size 232 bytes, rsa.o(i.ali_rsa_public_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592 + Unknown Stack Size
<LI>Call Chain = ali_rsa_public_encrypt &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ali_rsa_public_encrypt_pre
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ali_get_hash_type
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_alt
</UL>

<P><STRONG><a name="[2a8]"></a>ali_rsa_verify</STRONG> (Thumb, 428 bytes, Stack size 248 bytes, rsa.o(i.ali_rsa_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3736 + Unknown Stack Size
<LI>Call Chain = ali_rsa_verify &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ali_rsa_key_decode
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ali_get_hash_type
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ali_get_hash_size
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_alt
</UL>

<P><STRONG><a name="[4ae]"></a>ali_seed</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ali_crypto_rand.o(i.ali_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ali_seed
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrand
</UL>

<P><STRONG><a name="[25c]"></a>aos_cli_get_tag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cli.o(i.aos_cli_get_tag))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_print_cb
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_block
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_statistic_info
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_map
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_free_map
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_version
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_cmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uptime_cmd
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_cmd
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bad_command
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_cmd
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_cmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devname_cmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
</UL>

<P><STRONG><a name="[2aa]"></a>aos_cli_init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, cli.o(i.aos_cli_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = aos_cli_init &rArr; aos_task_new_ext &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new_ext
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_register_commands
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[2ad]"></a>aos_cli_register_command</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cli.o(i.aos_cli_register_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aos_cli_register_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_register_commands
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_init
</UL>

<P><STRONG><a name="[2ab]"></a>aos_cli_register_commands</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, cli.o(i.aos_cli_register_commands))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = aos_cli_register_commands &rArr; aos_cli_register_command
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_register_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
</UL>

<P><STRONG><a name="[2ae]"></a>aos_event_service_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, local_event.o(i.aos_event_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = aos_event_service_init &rArr; aos_poll_read_fd &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_set_eventfd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
</UL>

<P><STRONG><a name="[2b2]"></a>aos_fcntl</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, vfs.o(i.aos_fcntl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aos_fcntl
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_fcntl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
</UL>

<P><STRONG><a name="[2b4]"></a>aos_framework_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.aos_framework_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368 + Unknown Stack Size
<LI>Call Chain = aos_framework_init &rArr; version_init &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[21]"></a>aos_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_recovery_cb
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_print_cb
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_gc_cb
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_close
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_init
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_destroy
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_msg_temp
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_subscribe_upgrade
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[2ba]"></a>aos_get_app_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, version.o(i.aos_get_app_version))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_version
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_os_version
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_if_need
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_parmas
</UL>

<P><STRONG><a name="[2b7]"></a>aos_get_kernel_version</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, version.o(i.aos_get_kernel_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aos_get_kernel_version
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_version_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_version
</UL>

<P><STRONG><a name="[2b9]"></a>aos_get_os_version</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ota_version.o(i.aos_get_os_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aos_get_os_version
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_app_version
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_system_version
</UL>

<P><STRONG><a name="[2bb]"></a>aos_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = aos_init &rArr; krhino_init &rArr; dyn_mem_proc_task_start &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_start
</UL>

<P><STRONG><a name="[2bd]"></a>aos_ioctl</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, vfs.o(i.aos_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aos_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_add_event
</UL>

<P><STRONG><a name="[2bf]"></a>aos_kernel_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, aos_init.o(i.aos_kernel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376 + Unknown Stack Size
<LI>Call Chain = aos_kernel_init &rArr; application_start &rArr; netmgr_init &rArr; read_persistent_conf &rArr; aos_kv_get &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_device_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_service_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_framework_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_start
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[2c7]"></a>aos_kv_del</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, kvmgr.o(i.aos_kv_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320 + Unknown Stack Size
<LI>Call Chain = aos_kv_del &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_get
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wifi_ssid
</UL>

<P><STRONG><a name="[b7]"></a>aos_kv_gc</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, kvmgr.o(i.aos_kv_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2312 + Unknown Stack Size
<LI>Call Chain = aos_kv_gc &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_state_set
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_format
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kvmgr.o(i.trigger_gc)
</UL>
<P><STRONG><a name="[2cf]"></a>aos_kv_get</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, kvmgr.o(i.aos_kv_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328 + Unknown Stack Size
<LI>Call Chain = aos_kv_get &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_get
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_get_crc16
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_ota_version
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_dev_version
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_persistent_conf
</UL>

<P><STRONG><a name="[2c2]"></a>aos_kv_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, kvmgr.o(i.aos_kv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336 + Unknown Stack Size
<LI>Call Chain = aos_kv_init &rArr; kv_init &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_gc
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_register_command
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[2d2]"></a>aos_kv_set</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, kvmgr.o(i.aos_kv_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344 + Unknown Stack Size
<LI>Call Chain = aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_update
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_get
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_save_crc16
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_init
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_ota_version
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_dev_version
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_set_ap_config
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_ssid
</UL>

<P><STRONG><a name="[2c3]"></a>aos_loop_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, yloop.o(i.aos_loop_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = aos_loop_init &rArr; aos_event_service_init &rArr; aos_poll_read_fd &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_key_create
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_context
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_context
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_service_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[2d8]"></a>aos_loop_run</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, yloop.o(i.aos_loop_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = aos_loop_run &rArr; aos_poll &rArr; init_parg &rArr; aos_sem_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_empty
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_del
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[2b1]"></a>aos_loop_set_eventfd</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, yloop.o(i.aos_loop_set_eventfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = aos_loop_set_eventfd &rArr; get_context &rArr; _set_context &rArr; aos_task_setspecific &rArr; krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_service_init
</UL>

<P><STRONG><a name="[20]"></a>aos_malloc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_owner_attach
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_recovery_cb
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_print_cb
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_gc_cb
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_find_cb
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_set_name
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_open
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_event_filter
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_init
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_download_url
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[188]"></a>aos_msleep</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_msleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = aos_msleep &rArr; krhino_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connet_wifi_ap
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
</UL>

<P><STRONG><a name="[15e]"></a>aos_mutex_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = aos_mutex_free &rArr; krhino_mutex_del &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_DeInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_close
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_destroy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_mutex_free
</UL>

<P><STRONG><a name="[160]"></a>aos_mutex_lock</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, aos_rhino.o(i.aos_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = aos_mutex_lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_SendData
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_ReceiveData
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_poll
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_gc
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_lock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_mutex_lock
</UL>

<P><STRONG><a name="[15c]"></a>aos_mutex_new</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_open
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_mutex_init
</UL>

<P><STRONG><a name="[162]"></a>aos_mutex_unlock</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_SendData
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_ReceiveData
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_poll
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_gc
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_unlock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_mutex_unlock
</UL>

<P><STRONG><a name="[1ab]"></a>aos_now_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_now_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_framework_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_set_boot
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_switch_to_new_fw
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_send
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_recv
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_connect
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_close
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_gethost_info
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mqtt_publish
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mqtt_gen_topic_name
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_gen_report_msg
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_gen_info_msg
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_mqtt_ota_callback
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_status_post
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_result_post
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_md5
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_if_need
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_subscribe_upgrade
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_parse_response
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_init
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_post_version_msg
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_do_update_packet
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_update
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_action
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_service_event
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uptime_cmd
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_access_security
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_wifi_config_start
</UL>

<P><STRONG><a name="[2af]"></a>aos_open</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, vfs.o(i.aos_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = aos_open &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_open
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_file
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fd
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_service_init
</UL>

<P><STRONG><a name="[2db]"></a>aos_poll</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, vfs.o(i.aos_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = aos_poll &rArr; init_parg &rArr; aos_sem_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_io
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_poll
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_poll
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parg
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_parg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
</UL>

<P><STRONG><a name="[2b0]"></a>aos_poll_read_fd</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, yloop.o(i.aos_poll_read_fd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = aos_poll_read_fd &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_fcntl
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_service_init
</UL>

<P><STRONG><a name="[2f1]"></a>aos_post_event</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, local_event.o(i.aos_post_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = aos_post_event &rArr; input_add_event &rArr; aos_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_add_event
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_start
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_stat_chg_event
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_ip_got_event
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_events_executor
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_smart_config_stop
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_smart_config_start
</UL>

<P><STRONG><a name="[2f3]"></a>aos_read</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, vfs.o(i.aos_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aos_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read_cb
</UL>

<P><STRONG><a name="[2f5]"></a>aos_reboot</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aos_reboot &rArr; hal_reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reboot
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_reboot
</UL>

<P><STRONG><a name="[2f7]"></a>aos_register_driver</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, vfs_register.o(i.aos_register_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = aos_register_driver &rArr; inode_reserve &rArr; inode_set_name &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_device_init
</UL>

<P><STRONG><a name="[2f9]"></a>aos_register_event_filter</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, local_event.o(i.aos_register_event_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = aos_register_event_filter &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_service_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_init
</UL>

<P><STRONG><a name="[23b]"></a>aos_sem_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = aos_sem_free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_DeInit
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_parg
</UL>

<P><STRONG><a name="[238]"></a>aos_sem_new</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, aos_rhino.o(i.aos_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = aos_sem_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parg
</UL>

<P><STRONG><a name="[1a5]"></a>aos_sem_signal</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TxCpltCallback
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RxCpltCallback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_poll_notify
</UL>

<P><STRONG><a name="[2cd]"></a>aos_sem_signal_all</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_sem_signal_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = aos_sem_signal_all &rArr; krhino_sem_give_all &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give_all
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_gc
</UL>

<P><STRONG><a name="[2d3]"></a>aos_sem_wait</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, aos_rhino.o(i.aos_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = aos_sem_wait &rArr; krhino_sem_take &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_io
</UL>

<P><STRONG><a name="[307]"></a>aos_set_log_level</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, log.o(i.aos_set_log_level))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
</UL>

<P><STRONG><a name="[2ff]"></a>aos_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = aos_start &rArr; krhino_start &rArr; workqueue_init &rArr; krhino_workqueue_create &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_start
</UL>

<P><STRONG><a name="[2ce]"></a>aos_task_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = aos_task_exit &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_gc
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_do_update_packet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_ota_thread
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
</UL>

<P><STRONG><a name="[276]"></a>aos_task_getspecific</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_task_getspecific))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = aos_task_getspecific &rArr; krhino_cur_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_get
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_context
</UL>

<P><STRONG><a name="[2d6]"></a>aos_task_key_create</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, aos_rhino.o(i.aos_task_key_create))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
</UL>

<P><STRONG><a name="[304]"></a>aos_task_new</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, aos_rhino.o(i.aos_task_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_gc
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_do_update_packet
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_cmd
</UL>

<P><STRONG><a name="[2ac]"></a>aos_task_new_ext</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, aos_rhino.o(i.aos_task_new_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = aos_task_new_ext &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
</UL>

<P><STRONG><a name="[284]"></a>aos_task_setspecific</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, aos_rhino.o(i.aos_task_setspecific))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = aos_task_setspecific &rArr; krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_set
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_context
</UL>

<P><STRONG><a name="[2b8]"></a>aos_version_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aos_rhino.o(i.aos_version_get))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_kernel_version
</UL>

<P><STRONG><a name="[2d7]"></a>aos_zalloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_zalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = aos_zalloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_owner_attach
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_subscribe_upgrade
</UL>

<P><STRONG><a name="[2c6]"></a>application_start</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mqtt-example-b_l475e.o(i.application_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368 + Unknown Stack Size
<LI>Call Chain = application_start &rArr; netmgr_init &rArr; read_persistent_conf &rArr; aos_kv_get &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_event_filter
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_set_loglevel
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_openlog
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_set_log_level
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_start
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[51f]"></a>board_init</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, board.o(i.board_init))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[86]"></a>bufchar</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mqttpacket.o(i.bufchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bufchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttpacket.o(i.MQTTPacket_decodeBuf)
</UL>
<P><STRONG><a name="[30d]"></a>cJSON_Delete</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cjson.o(i.cJSON_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_parse_response
</UL>

<P><STRONG><a name="[4f9]"></a>cJSON_GetErrorPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(i.cJSON_GetErrorPtr))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_parse_response
</UL>

<P><STRONG><a name="[30e]"></a>cJSON_GetObjectItem</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cjson.o(i.cJSON_GetObjectItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_GetObjectItem &rArr; cJSON_strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_parse_response
</UL>

<P><STRONG><a name="[311]"></a>cJSON_Parse</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cjson.o(i.cJSON_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = cJSON_Parse &rArr; parse_value &rArr; parse_number &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_parse_response
</UL>

<P><STRONG><a name="[290]"></a>calloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, armcc_libc.o(i.calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_append
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_alloc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
</UL>

<P><STRONG><a name="[b1]"></a>cancel_update</STRONG> (Thumb, 76 bytes, Stack size 1280 bytes, ota_service.o(i.cancel_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456 + Unknown Stack Size
<LI>Call Chain = cancel_update &rArr; ota_cancel_update_packet &rArr; ota_if_cancel &rArr; ota_is_cancelable &rArr; ota_get_status &rArr; ota_mutex_unlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_parse_cancel_responce
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_cancel_update_packet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_service.o(i.ota_regist_upgrade)
</UL>
<P><STRONG><a name="[317]"></a>check_md5</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, ota_download.o(i.check_md5))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = check_md5 &rArr; MD5_Final &rArr; MD5_Update &rArr; MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Final
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
</UL>

<P><STRONG><a name="[319]"></a>cli_getchar</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cli.o(i.cli_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = cli_getchar &rArr; hal_uart_recv &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
</UL>

<P><STRONG><a name="[31e]"></a>cli_putstr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cli.o(i.cli_putstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = cli_putstr &rArr; hal_uart_send &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[329]"></a>core_sched</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, k_sched.o(i.core_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = core_sched &rArr; preferred_cpu_ready_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_switch
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
</UL>

<P><STRONG><a name="[521]"></a>cpu_task_stack_init</STRONG> (Thumb, 304 bytes, Stack size 20 bytes, port_c.o(i.cpu_task_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_task_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[25d]"></a>csp_printf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, log.o(i.csp_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_print_cb
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_framework_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_set_boot
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_switch_to_new_fw
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_block
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_statistic_info
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_map
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_free_map
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_version
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_send
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_recv
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_connect
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_close
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_gethost_info
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mqtt_publish
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mqtt_gen_topic_name
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_gen_report_msg
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_gen_info_msg
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_mqtt_ota_callback
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_status_post
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_result_post
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_md5
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_if_need
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_subscribe_upgrade
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_parse_response
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_init
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_post_version_msg
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_do_update_packet
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_update
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_action
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_service_event
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack_byname
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_cmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uptime_cmd
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_cmd
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bad_command
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_cmd
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_cmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devname_cmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_access_security
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_wifi_config_start
</UL>

<P><STRONG><a name="[b0]"></a>do_update</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ota_service.o(i.do_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824 + Unknown Stack Size
<LI>Call Chain = do_update &rArr; update_action &rArr; ota_do_update_packet &rArr; ota_status_post &rArr; platform_ota_status_post &rArr; IOT_MQTT_Yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_action
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_service.o(i.ota_regist_upgrade)
</UL>
<P><STRONG><a name="[333]"></a>dump_kmm_free_map</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, k_mm_debug.o(i.dump_kmm_free_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dump_kmm_free_map &rArr; print_block &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_block
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
</UL>

<P><STRONG><a name="[335]"></a>dump_kmm_map</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, k_mm_debug.o(i.dump_kmm_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dump_kmm_map &rArr; print_block &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_block
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
</UL>

<P><STRONG><a name="[336]"></a>dump_kmm_statistic_info</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, k_mm_debug.o(i.dump_kmm_statistic_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dump_kmm_statistic_info &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
</UL>

<P><STRONG><a name="[337]"></a>dump_task_stack</STRONG> (Thumb, 372 bytes, Stack size 560 bytes, dumpsys.o(i.dump_task_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dump_task_stack &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_stack_cur_free
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack_byname
</UL>

<P><STRONG><a name="[339]"></a>dump_task_stack_byname</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, dumpsys.o(i.dump_task_stack_byname))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = dump_task_stack_byname &rArr; dump_task_stack &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_func
</UL>

<P><STRONG><a name="[33b]"></a>dumpsys_func</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, dumpsys.o(i.dumpsys_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = dumpsys_func &rArr; dump_task_stack_byname &rArr; dump_task_stack &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack_byname
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_info_func
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_cmd
</UL>

<P><STRONG><a name="[33e]"></a>dumpsys_mm_info_func</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, k_mm_debug.o(i.dumpsys_mm_info_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dumpsys_mm_info_func &rArr; dump_kmm_map &rArr; print_block &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_statistic_info
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_map
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_free_map
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_func
</UL>

<P><STRONG><a name="[33c]"></a>dumpsys_task_func</STRONG> (Thumb, 528 bytes, Stack size 392 bytes, dumpsys.o(i.dumpsys_task_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = dumpsys_task_func &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_stack_min_free
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_func
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_cmd
</UL>

<P><STRONG><a name="[95]"></a>dyn_mem_proc_task</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, k_dyn_mem_proc.o(i.dyn_mem_proc_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = dyn_mem_proc_task &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_dyn_mem_proc.o(i.dyn_mem_proc_task_start)
</UL>
<P><STRONG><a name="[340]"></a>dyn_mem_proc_task_start</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, k_dyn_mem_proc.o(i.dyn_mem_proc_task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = dyn_mem_proc_task_start &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[ab]"></a>event_handle_mqtt</STRONG> (Thumb, 496 bytes, Stack size 32 bytes, mqtt-example-b_l475e.o(i.event_handle_mqtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = event_handle_mqtt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt-example-b_l475e.o(i.mqtt_client_example)
</UL>
<P><STRONG><a name="[252]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[8c]"></a>fputc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, soc_init.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = fputc &rArr; hal_uart_send &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
</UL>
<BR>[Address Reference Count : 3]<UL><LI> printfa.o(i.__0vprintf)
<LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[17d]"></a>free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, armcc_libc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_internal
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Establish
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Destroy
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_free
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_append
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_alt
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_alt
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free_alt
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_free
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
</UL>

<P><STRONG><a name="[34c]"></a>hal_flash_erase</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, flash_port.o(i.hal_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hal_flash_erase &rArr; FLASH_unlock_erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_get_info
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_unlock_erase
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_bank1_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_erase
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_init
</UL>

<P><STRONG><a name="[34d]"></a>hal_flash_get_info</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash_port.o(i.hal_flash_get_info))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
</UL>

<P><STRONG><a name="[34e]"></a>hal_flash_read</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, flash_port.o(i.hal_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hal_flash_read &rArr; FLASH_bank1_enabled &rArr; HAL_FLASHEx_OBGetConfig &rArr; FLASH_OB_GetPCROP
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_get_info
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_read_at
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_bank1_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_read
</UL>

<P><STRONG><a name="[350]"></a>hal_flash_write</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, flash_port.o(i.hal_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_get_info
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_update
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_bank1_enabled
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_write
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_write
</UL>

<P><STRONG><a name="[356]"></a>hal_ota_get_default_module</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ota.o(i.hal_ota_get_default_module))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_write
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_set_boot
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_hal_write_cb
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_hal_finish_cb
</UL>

<P><STRONG><a name="[4dc]"></a>hal_ota_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ota.o(i.hal_ota_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_ota_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_hal_init
</UL>

<P><STRONG><a name="[37d]"></a>hal_ota_register_module</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ota.o(i.hal_ota_register_module))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_start_hal
</UL>

<P><STRONG><a name="[355]"></a>hal_ota_set_boot</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ota.o(i.hal_ota_set_boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_ota_set_boot
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_get_default_module
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_hal_finish_cb
</UL>

<P><STRONG><a name="[357]"></a>hal_ota_switch_to_new_fw</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ota_port.o(i.hal_ota_switch_to_new_fw))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hal_ota_switch_to_new_fw &rArr; FLASH_set_boot_bank &rArr; HAL_FLASHEx_OBProgram &rArr; FLASH_OB_PCROPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_set_boot_bank
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_set_boot
</UL>

<P><STRONG><a name="[358]"></a>hal_ota_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ota.o(i.hal_ota_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_ota_write
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_get_default_module
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_hal_write_cb
</UL>

<P><STRONG><a name="[2f6]"></a>hal_reboot</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hw.o(i.hal_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_reboot
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_cmd
</UL>

<P><STRONG><a name="[31a]"></a>hal_uart_recv</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, soc_init.o(i.hal_uart_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = hal_uart_recv &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getchar
</UL>

<P><STRONG><a name="[31f]"></a>hal_uart_send</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, soc_init.o(i.hal_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = hal_uart_send &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_putstr
</UL>

<P><STRONG><a name="[35c]"></a>hal_wifi_get_default_module</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wifi_1.o(i.hal_wifi_get_default_module))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_start_debug_mode
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_start
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_set_mac_addr
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_get_mac_addr
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_init
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconnect_wifi
</UL>

<P><STRONG><a name="[35b]"></a>hal_wifi_get_mac_addr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wifi_1.o(i.hal_wifi_get_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_wifi_get_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_get_default_module
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_cmd
</UL>

<P><STRONG><a name="[4b2]"></a>hal_wifi_install_event</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi_1.o(i.hal_wifi_install_event))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_init
</UL>

<P><STRONG><a name="[37c]"></a>hal_wifi_register_module</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wifi_1.o(i.hal_wifi_register_module))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_start_hal
</UL>

<P><STRONG><a name="[35d]"></a>hal_wifi_set_mac_addr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wifi_1.o(i.hal_wifi_set_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_wifi_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_get_default_module
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_cmd
</UL>

<P><STRONG><a name="[35e]"></a>hal_wifi_start</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wifi_1.o(i.hal_wifi_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_wifi_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_get_default_module
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconnect_wifi
</UL>

<P><STRONG><a name="[35f]"></a>hal_wifi_start_debug_mode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wifi_1.o(i.hal_wifi_start_debug_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_wifi_start_debug_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_get_default_module
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_debug_cmd
</UL>

<P><STRONG><a name="[367]"></a>http_gethost_info</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, ota_download.o(i.http_gethost_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = http_gethost_info &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
</UL>

<P><STRONG><a name="[36c]"></a>httpclient_close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utils_httpc.o(i.httpclient_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = httpclient_close
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[278]"></a>httpclient_common</STRONG> (Thumb, 260 bytes, Stack size 112 bytes, utils_httpc.o(i.httpclient_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_request
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_connect
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_close
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_host
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_response
</UL>

<P><STRONG><a name="[36b]"></a>httpclient_connect</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, utils_httpc.o(i.httpclient_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = httpclient_connect &rArr; httpclient_conn &rArr; LITE_syslog &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[371]"></a>httpclient_get_info</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, utils_httpc.o(i.httpclient_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = httpclient_get_info &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_auth
</UL>

<P><STRONG><a name="[36f]"></a>httpclient_recv_response</STRONG> (Thumb, 204 bytes, Stack size 296 bytes, utils_httpc.o(i.httpclient_recv_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_multi_line_internal
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[378]"></a>httpclient_send_auth</STRONG> (Thumb, 126 bytes, Stack size 328 bytes, utils_httpc.o(i.httpclient_send_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_get_info
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_base64enc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
</UL>

<P><STRONG><a name="[379]"></a>httpclient_send_header</STRONG> (Thumb, 642 bytes, Stack size 96 bytes, utils_httpc.o(i.httpclient_send_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_auth
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_get_info
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_url
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_multi_line_internal
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_request
</UL>

<P><STRONG><a name="[36d]"></a>httpclient_send_request</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, utils_httpc.o(i.httpclient_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = httpclient_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_userdata
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[37a]"></a>httpclient_send_userdata</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, utils_httpc.o(i.httpclient_send_userdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = httpclient_send_userdata &rArr; LITE_syslog &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_request
</UL>

<P><STRONG><a name="[37b]"></a>hw_start_hal</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hw.o(i.hw_start_hal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hw_start_hal &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_register_module
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_register_module
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[9d]"></a>idle_task</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, k_idle.o(i.idle_task))
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_sys.o(i.krhino_init)
</UL>
<P><STRONG><a name="[4ab]"></a>init_sensors</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sensors_data.o(i.init_sensors))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
</UL>

<P><STRONG><a name="[381]"></a>inode_alloc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, vfs_inode.o(i.inode_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
</UL>

<P><STRONG><a name="[380]"></a>inode_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vfs_inode.o(i.inode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
</UL>

<P><STRONG><a name="[2e6]"></a>inode_open</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, vfs_inode.o(i.inode_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inode_open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
</UL>

<P><STRONG><a name="[382]"></a>inode_ptr_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, vfs_inode.o(i.inode_ptr_get))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
</UL>

<P><STRONG><a name="[4b8]"></a>inode_ref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vfs_inode.o(i.inode_ref))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_file
</UL>

<P><STRONG><a name="[2f8]"></a>inode_reserve</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, vfs_inode.o(i.inode_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = inode_reserve &rArr; inode_set_name &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_ptr_get
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_alloc
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_set_name
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
</UL>

<P><STRONG><a name="[32f]"></a>inode_unref</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vfs_inode.o(i.inode_unref))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
</UL>

<P><STRONG><a name="[27c]"></a>iotx_ca_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ca.o(i.iotx_ca_get))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotId_iotToken_http
</UL>

<P><STRONG><a name="[1c7]"></a>iotx_conn_info_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_1.o(i.iotx_conn_info_get))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_SetupConnInfo
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotId_iotToken_http
</UL>

<P><STRONG><a name="[269]"></a>iotx_device_info_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_1.o(i.iotx_device_info_get))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_hmac_signature
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_authenticate_string
</UL>

<P><STRONG><a name="[1c4]"></a>iotx_device_info_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, device_1.o(i.iotx_device_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = iotx_device_info_init &rArr; LITE_syslog &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_SetupConnInfo
</UL>

<P><STRONG><a name="[1c5]"></a>iotx_device_info_set</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, device_1.o(i.iotx_device_info_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = iotx_device_info_set &rArr; LITE_syslog &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_SetupConnInfo
</UL>

<P><STRONG><a name="[1c6]"></a>iotx_guider_authenticate</STRONG> (Thumb, 868 bytes, Stack size 1584 bytes, guider.o(i.iotx_guider_authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3144 + Unknown Stack Size
<LI>Call Chain = iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timestamp_string
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_secure_mode_str
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_secure_mode_num
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotId_iotToken_http
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ident_partner
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_conn_string
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_hmac_signature
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_authenticate_string
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_authenticate_http_url
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_device_info_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_conn_info_get
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_ca_get
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_SetupConnInfo
</UL>

<P><STRONG><a name="[9b]"></a>iotx_net_connect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utils_net.o(i.iotx_net_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 3020 + Unknown Stack Size
<LI>Call Chain = iotx_net_connect &rArr; connect_ssl &rArr; HAL_SSL_Establish &rArr; TLSConnectNetwork &rArr; _ssl_client_init &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_crypt_cbc_alt &rArr; ali_aes_init &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_tcp
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ssl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils_net.o(i.iotx_net_init)
</UL>
<P><STRONG><a name="[9a]"></a>iotx_net_disconnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utils_net.o(i.iotx_net_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = iotx_net_disconnect &rArr; disconnect_ssl &rArr; HAL_SSL_Destroy &rArr; utils_network_ssl_disconnect &rArr; mbedtls_net_free &rArr; WIFI_CloseClientConnection &rArr; M0_WIFI_StopConn &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_tcp
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_ssl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils_net.o(i.iotx_net_init)
</UL>
<P><STRONG><a name="[36a]"></a>iotx_net_init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, utils_net.o(i.iotx_net_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = iotx_net_init &rArr; LITE_syslog &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[1bc]"></a>iotx_time_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utils_timer.o(i.iotx_time_init))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Yield
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRePublish
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[36e]"></a>iotx_time_left</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, utils_timer.o(i.iotx_time_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[205]"></a>iotx_time_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, utils_timer.o(i.iotx_time_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = iotx_time_start &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_subInfo_to
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[3a3]"></a>json_get_next_object</STRONG> (Thumb, 456 bytes, Stack size 72 bytes, json_parser.o(i.json_get_next_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_name_value
</UL>

<P><STRONG><a name="[3a5]"></a>json_get_object</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, json_parser.o(i.json_get_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_get_object
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_name_value
</UL>

<P><STRONG><a name="[1ca]"></a>json_get_value_by_name</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, json_parser.o(i.json_get_value_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = json_get_value_by_name &rArr; json_parse_name_value &rArr; json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_name_value
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
</UL>

<P><STRONG><a name="[9c]"></a>json_get_value_by_name_cb</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, json_parser.o(i.json_get_value_by_name_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = json_get_value_by_name_cb &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_parser.o(i.json_get_value_by_name)
</UL>
<P><STRONG><a name="[3a4]"></a>json_parse_name_value</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, json_parser.o(i.json_parse_name_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = json_parse_name_value &rArr; json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_object
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_next_object
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value_by_name
</UL>

<P><STRONG><a name="[323]"></a>k_err_proc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, k_err.o(i.k_err_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_stack_cur_free
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_stack_ovf_check
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack
</UL>

<P><STRONG><a name="[3a6]"></a>k_mm_alloc</STRONG> (Thumb, 418 bytes, Stack size 56 bytes, k_mm.o(i.k_mm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_bitmap_clear
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_block
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findblk_byidx
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_search
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addsize
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</UL>

<P><STRONG><a name="[3a8]"></a>k_mm_free</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, k_mm.o(i.k_mm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removesize
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_block
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_search
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
</UL>

<P><STRONG><a name="[3ab]"></a>k_mm_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, k_mm.o(i.k_mm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = k_mm_init &rArr; krhino_init_mm_head &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[3b0]"></a>kobj_list_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, k_stats.o(i.kobj_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kobj_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[3ad]"></a>krhino_add_mm_region</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, k_mm.o(i.krhino_add_mm_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = krhino_add_mm_region &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mm_region
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
</UL>

<P><STRONG><a name="[302]"></a>krhino_cur_task_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, k_task.o(i.krhino_cur_task_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_cur_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_getspecific
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_func
</UL>

<P><STRONG><a name="[2bc]"></a>krhino_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, k_sys.o(i.krhino_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = krhino_init &rArr; dyn_mem_proc_task_start &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_init
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kobj_list_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runqueue_init
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_init
</UL>

<P><STRONG><a name="[3ac]"></a>krhino_init_mm_head</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, k_mm.o(i.krhino_init_mm_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = krhino_init_mm_head &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removesize
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mm_region
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
</UL>

<P><STRONG><a name="[222]"></a>krhino_intrpt_enter</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, k_sys.o(i.krhino_intrpt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_intrpt_enter &rArr; k_err_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[224]"></a>krhino_intrpt_exit</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, k_sys.o(i.krhino_intrpt_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = krhino_intrpt_exit &rArr; preferred_cpu_ready_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_switch
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3ae]"></a>krhino_mblk_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, k_mm_blk.o(i.krhino_mblk_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_alloc
</UL>

<P><STRONG><a name="[3af]"></a>krhino_mblk_free</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, k_mm_blk.o(i.krhino_mblk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
</UL>

<P><STRONG><a name="[3b7]"></a>krhino_mblk_pool_init</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, k_mm_blk.o(i.krhino_mblk_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_pool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
</UL>

<P><STRONG><a name="[2dd]"></a>krhino_mm_alloc</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, k_mm.o(i.krhino_mm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_owner_attach
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
</UL>

<P><STRONG><a name="[2b6]"></a>krhino_mm_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, k_mm.o(i.krhino_mm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>

<P><STRONG><a name="[2df]"></a>krhino_ms_to_ticks</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, k_time.o(i.krhino_ms_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = krhino_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
</UL>

<P><STRONG><a name="[2e3]"></a>krhino_mutex_create</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, k_mutex.o(i.krhino_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_create &rArr; mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
</UL>

<P><STRONG><a name="[2e1]"></a>krhino_mutex_del</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, k_mutex.o(i.krhino_mutex_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_del &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
</UL>

<P><STRONG><a name="[2e2]"></a>krhino_mutex_lock</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, k_mutex.o(i.krhino_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</UL>

<P><STRONG><a name="[2e4]"></a>krhino_mutex_unlock</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, k_mutex.o(i.krhino_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</UL>

<P><STRONG><a name="[2de]"></a>krhino_owner_attach</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, k_mm.o(i.krhino_owner_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = krhino_owner_attach
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
</UL>

<P><STRONG><a name="[3c2]"></a>krhino_queue_create</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, k_queue.o(i.krhino_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = krhino_queue_create &rArr; queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
</UL>

<P><STRONG><a name="[3c4]"></a>krhino_queue_recv</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, k_queue.o(i.krhino_queue_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = krhino_queue_recv &rArr; ringbuf_pop &rArr; ringbuf_headlen_decompress &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[23d]"></a>krhino_sched_disable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, k_sched.o(i.krhino_sched_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = krhino_sched_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetModuleFwRevision
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendData
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ReceiveData
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_OpenClientConnection
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_CloseClientConnection
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Disconnect
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
</UL>

<P><STRONG><a name="[23e]"></a>krhino_sched_enable</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, k_sched.o(i.krhino_sched_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = krhino_sched_enable &rArr; core_sched &rArr; preferred_cpu_ready_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetModuleFwRevision
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendData
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ReceiveData
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_OpenClientConnection
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_CloseClientConnection
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Disconnect
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
</UL>

<P><STRONG><a name="[2fb]"></a>krhino_sem_create</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, k_sem.o(i.krhino_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = krhino_sem_create &rArr; sem_create
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
</UL>

<P><STRONG><a name="[2fa]"></a>krhino_sem_del</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, k_sem.o(i.krhino_sem_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_sem_del &rArr; pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
</UL>

<P><STRONG><a name="[2fc]"></a>krhino_sem_give</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, k_sem.o(i.krhino_sem_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
</UL>

<P><STRONG><a name="[2fd]"></a>krhino_sem_give_all</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, k_sem.o(i.krhino_sem_give_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = krhino_sem_give_all &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal_all
</UL>

<P><STRONG><a name="[2fe]"></a>krhino_sem_take</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, k_sem.o(i.krhino_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = krhino_sem_take &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
</UL>

<P><STRONG><a name="[ff]"></a>krhino_stack_ovf_check</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, k_stats.o(i.krhino_stack_ovf_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = krhino_stack_ovf_check &rArr; k_err_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[300]"></a>krhino_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, k_sys.o(i.krhino_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = krhino_start &rArr; workqueue_init &rArr; krhino_workqueue_create &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_first_task_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_start
</UL>

<P><STRONG><a name="[3cc]"></a>krhino_sys_tick_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, k_time.o(i.krhino_sys_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
</UL>

<P><STRONG><a name="[2e5]"></a>krhino_sys_time_get</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, k_time.o(i.krhino_sys_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>

<P><STRONG><a name="[3b5]"></a>krhino_task_create</STRONG> (Thumb, 50 bytes, Stack size 88 bytes, k_task.o(i.krhino_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[94]"></a>krhino_task_deathbed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, k_task.o(i.krhino_task_deathbed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = krhino_task_deathbed &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port_c.o(i.cpu_task_stack_init)
</UL>
<P><STRONG><a name="[3ce]"></a>krhino_task_del</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, k_task.o(i.krhino_task_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = krhino_task_del &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
</UL>

<P><STRONG><a name="[305]"></a>krhino_task_dyn_create</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, k_task.o(i.krhino_task_dyn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_start
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task_start
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new_ext
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
</UL>

<P><STRONG><a name="[301]"></a>krhino_task_dyn_del</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, k_task.o(i.krhino_task_dyn_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
</UL>

<P><STRONG><a name="[303]"></a>krhino_task_info_get</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, k_task.o(i.krhino_task_info_get))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_getspecific
</UL>

<P><STRONG><a name="[306]"></a>krhino_task_info_set</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, k_task.o(i.krhino_task_info_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
</UL>

<P><STRONG><a name="[3d6]"></a>krhino_task_resume</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, k_task.o(i.krhino_task_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_task_resume &rArr; task_resume &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[2e0]"></a>krhino_task_sleep</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, k_task.o(i.krhino_task_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = krhino_task_sleep &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
</UL>

<P><STRONG><a name="[338]"></a>krhino_task_stack_cur_free</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, k_task.o(i.krhino_task_stack_cur_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = krhino_task_stack_cur_free &rArr; k_err_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_get_cur_sp
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_task_stack
</UL>

<P><STRONG><a name="[33f]"></a>krhino_task_stack_min_free</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, k_task.o(i.krhino_task_stack_min_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = krhino_task_stack_min_free
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
</UL>

<P><STRONG><a name="[223]"></a>krhino_tick_proc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, k_time.o(i.krhino_tick_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = krhino_tick_proc &rArr; tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[532]"></a>krhino_version_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_sys.o(i.krhino_version_get))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_cmd
</UL>

<P><STRONG><a name="[3dc]"></a>krhino_workqueue_create</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, k_workqueue.o(i.krhino_workqueue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = krhino_workqueue_create &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_resume
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_is_exist
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_init
</UL>

<P><STRONG><a name="[3b6]"></a>ktimer_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, k_timer.o(i.ktimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ktimer_init &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_create
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[3a2]"></a>list_destroy</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, utils_list.o(i.list_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = list_destroy &rArr; LITE_free_internal &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_release
</UL>

<P><STRONG><a name="[207]"></a>list_iterator_destroy</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, utils_list.o(i.list_iterator_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = list_iterator_destroy &rArr; LITE_free_internal &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_subInfo_from
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_pubInfo_from
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubInfoProc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[1ff]"></a>list_iterator_new</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, utils_list.o(i.list_iterator_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = list_iterator_new &rArr; list_iterator_new_from_node &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new_from_node
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_subInfo_from
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_pubInfo_from
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubInfoProc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[3e3]"></a>list_iterator_new_from_node</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, utils_list.o(i.list_iterator_new_from_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = list_iterator_new_from_node &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_malloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new
</UL>

<P><STRONG><a name="[200]"></a>list_iterator_next</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, utils_list.o(i.list_iterator_next))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_subInfo_from
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_pubInfo_from
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubInfoProc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[39a]"></a>list_new</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, utils_list.o(i.list_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = list_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_malloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
</UL>

<P><STRONG><a name="[39f]"></a>list_node_new</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, utils_list.o(i.list_node_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_malloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_subInfo_to
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
</UL>

<P><STRONG><a name="[201]"></a>list_remove</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, utils_list.o(i.list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = list_remove &rArr; LITE_free_internal &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubInfoProc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[3a0]"></a>list_rpush</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, utils_list.o(i.list_rpush))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_subInfo_to
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
</UL>

<P><STRONG><a name="[375]"></a>log_multi_line_internal</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, lite-log.o(i.log_multi_line_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = log_multi_line_internal &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_loglevel
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
</UL>

<P><STRONG><a name="[7e]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aos.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = main &rArr; sys_start &rArr; aos_init &rArr; krhino_init &rArr; dyn_mem_proc_task_start &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[17f]"></a>malloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, armcc_libc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_malloc_internal
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Establish
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_authenticate_string
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_alt
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_alt
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc_alt
</UL>

<P><STRONG><a name="[29c]"></a>mbedtls_aes_crypt_cbc</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, aes.o(i.mbedtls_aes_crypt_cbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_process
</UL>

<P><STRONG><a name="[28e]"></a>mbedtls_aes_crypt_cbc_alt</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, mbedtls_alt.o(i.mbedtls_aes_crypt_cbc_alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2516 + Unknown Stack Size
<LI>Call Chain = mbedtls_aes_crypt_cbc_alt &rArr; ali_aes_init &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_reset
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_process
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_get_ctx_size
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc_wrap
</UL>

<P><STRONG><a name="[29d]"></a>mbedtls_aes_crypt_ctr</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, aes.o(i.mbedtls_aes_crypt_ctr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_aes_crypt_ctr &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_process
</UL>

<P><STRONG><a name="[29b]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, aes.o(i.mbedtls_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_encrypt
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_process
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</UL>

<P><STRONG><a name="[28f]"></a>mbedtls_aes_crypt_ecb_alt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mbedtls_alt.o(i.mbedtls_aes_crypt_ecb_alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_aes_crypt_ecb_alt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[3e5]"></a>mbedtls_aes_decrypt</STRONG> (Thumb, 956 bytes, Stack size 40 bytes, aes.o(i.mbedtls_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[3e6]"></a>mbedtls_aes_encrypt</STRONG> (Thumb, 954 bytes, Stack size 40 bytes, aes.o(i.mbedtls_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[3e7]"></a>mbedtls_aes_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, aes.o(i.mbedtls_aes_free))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>

<P><STRONG><a name="[292]"></a>mbedtls_aes_free_alt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mbedtls_alt.o(i.mbedtls_aes_free_alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mbedtls_aes_free_alt &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
</UL>

<P><STRONG><a name="[297]"></a>mbedtls_aes_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aes.o(i.mbedtls_aes_init))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>

<P><STRONG><a name="[291]"></a>mbedtls_aes_init_alt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbedtls_alt.o(i.mbedtls_aes_init_alt))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
</UL>

<P><STRONG><a name="[298]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 198 bytes, Stack size 320 bytes, aes.o(i.mbedtls_aes_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 2428<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_init
</UL>

<P><STRONG><a name="[293]"></a>mbedtls_aes_setkey_dec_alt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mbedtls_alt.o(i.mbedtls_aes_setkey_dec_alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_aes_setkey_dec_alt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
</UL>

<P><STRONG><a name="[299]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, aes.o(i.mbedtls_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2108<LI>Call Chain = mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_gen_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_aes_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>

<P><STRONG><a name="[294]"></a>mbedtls_aes_setkey_enc_alt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mbedtls_alt.o(i.mbedtls_aes_setkey_enc_alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_aes_setkey_enc_alt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
</UL>

<P><STRONG><a name="[3e9]"></a>mbedtls_asn1_get_alg</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, asn1parse.o(i.mbedtls_asn1_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
</UL>

<P><STRONG><a name="[3ed]"></a>mbedtls_asn1_get_bitstring_null</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, asn1parse.o(i.mbedtls_asn1_get_bitstring_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[3ee]"></a>mbedtls_asn1_get_int</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, asn1parse.o(i.mbedtls_asn1_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[3ec]"></a>mbedtls_asn1_get_len</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, asn1parse.o(i.mbedtls_asn1_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>

<P><STRONG><a name="[3ea]"></a>mbedtls_asn1_get_tag</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, asn1parse.o(i.mbedtls_asn1_get_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_skip_parse
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>

<P><STRONG><a name="[426]"></a>mbedtls_base64_decode</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, base64.o(i.mbedtls_base64_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_base64_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[3ef]"></a>mbedtls_cipher_crypt</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, cipher.o(i.mbedtls_cipher_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_reset
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[3f3]"></a>mbedtls_cipher_finish</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, cipher.o(i.mbedtls_cipher_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[495]"></a>mbedtls_cipher_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cipher.o(i.mbedtls_cipher_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</UL>

<P><STRONG><a name="[45d]"></a>mbedtls_cipher_info_from_type</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[3f5]"></a>mbedtls_cipher_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_init))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[3f1]"></a>mbedtls_cipher_reset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_reset))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[3f0]"></a>mbedtls_cipher_set_iv</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_set_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_cipher_set_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[3f7]"></a>mbedtls_cipher_set_padding_mode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_set_padding_mode))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[45e]"></a>mbedtls_cipher_setkey</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[3f6]"></a>mbedtls_cipher_setup</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cipher.o(i.mbedtls_cipher_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[3f2]"></a>mbedtls_cipher_update</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, cipher.o(i.mbedtls_cipher_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[440]"></a>mbedtls_md</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, md.o(i.mbedtls_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>

<P><STRONG><a name="[dd]"></a>mbedtls_md5</STRONG> (Thumb, 50 bytes, Stack size 104 bytes, md5.o(i.mbedtls_md5))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbedtls_md5 &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[3fd]"></a>mbedtls_md5_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md5.o(i.mbedtls_md5_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md5_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_clone_wrap
</UL>

<P><STRONG><a name="[3fb]"></a>mbedtls_md5_finish</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, md5.o(i.mbedtls_md5_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish_wrap
</UL>

<P><STRONG><a name="[3fc]"></a>mbedtls_md5_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, md5.o(i.mbedtls_md5_free))
<BR><BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_free
</UL>

<P><STRONG><a name="[3f8]"></a>mbedtls_md5_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md5.o(i.mbedtls_md5_init))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_alloc
</UL>

<P><STRONG><a name="[3fe]"></a>mbedtls_md5_process</STRONG> (Thumb, 1782 bytes, Stack size 88 bytes, md5.o(i.mbedtls_md5_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_process_wrap
</UL>

<P><STRONG><a name="[3f9]"></a>mbedtls_md5_starts</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, md5.o(i.mbedtls_md5_starts))
<BR><BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts_wrap
</UL>

<P><STRONG><a name="[3fa]"></a>mbedtls_md5_update</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, md5.o(i.mbedtls_md5_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update_wrap
</UL>

<P><STRONG><a name="[446]"></a>mbedtls_md_finish</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[3ff]"></a>mbedtls_md_free</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mbedtls_md_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>

<P><STRONG><a name="[43f]"></a>mbedtls_md_get_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[513]"></a>mbedtls_md_hmac_finish</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, md.o(i.mbedtls_md_hmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[515]"></a>mbedtls_md_hmac_reset</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_hmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[401]"></a>mbedtls_md_hmac_starts</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, md.o(i.mbedtls_md_hmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[512]"></a>mbedtls_md_hmac_update</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_hmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_hmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[43e]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>

<P><STRONG><a name="[441]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_init))
<BR><BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>

<P><STRONG><a name="[514]"></a>mbedtls_md_process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_process
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[402]"></a>mbedtls_md_setup</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, md.o(i.mbedtls_md_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>

<P><STRONG><a name="[444]"></a>mbedtls_md_starts</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[445]"></a>mbedtls_md_update</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_update
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[403]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[406]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[40f]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>

<P><STRONG><a name="[407]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[409]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, bignum.o(i.mbedtls_mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[40a]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>

<P><STRONG><a name="[404]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>

<P><STRONG><a name="[40c]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 798 bytes, Stack size 144 bytes, bignum.o(i.mbedtls_mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
</UL>

<P><STRONG><a name="[414]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 1124 bytes, Stack size 1672 bytes, bignum.o(i.mbedtls_mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[418]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 52 bytes, Stack size 1040 bytes, bignum.o(i.mbedtls_mpi_fill_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[40b]"></a>mbedtls_mpi_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[41a]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_gcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
</UL>

<P><STRONG><a name="[405]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>

<P><STRONG><a name="[40d]"></a>mbedtls_mpi_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_init))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[41c]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 616 bytes, Stack size 128 bytes, bignum.o(i.mbedtls_mpi_inv_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[41b]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</UL>

<P><STRONG><a name="[40e]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>

<P><STRONG><a name="[415]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[413]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[41d]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
</UL>

<P><STRONG><a name="[263]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ali_rsa_key_decode
</UL>

<P><STRONG><a name="[410]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[412]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[2a6]"></a>mbedtls_mpi_size</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, bignum.o(i.mbedtls_mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_verify
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_public_encrypt
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
</UL>

<P><STRONG><a name="[408]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[411]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[420]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[229]"></a>mbedtls_net_connect</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, mbedtls_net.o(i.mbedtls_net_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_connect &rArr; WIFI_OpenClientConnection &rArr; M0_WIFI_StartClientConnection &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_OpenClientConnection
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetHostAddress
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[421]"></a>mbedtls_net_free</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mbedtls_net.o(i.mbedtls_net_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_free &rArr; WIFI_CloseClientConnection &rArr; M0_WIFI_StopConn &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_CloseClientConnection
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_disconnect
</UL>

<P><STRONG><a name="[285]"></a>mbedtls_net_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbedtls_net.o(i.mbedtls_net_init))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ssl_client_init
</UL>

<P><STRONG><a name="[8a]"></a>mbedtls_net_recv</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mbedtls_net.o(i.mbedtls_net_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_recv &rArr; WIFI_ReceiveData &rArr; M0_WIFI_ReceiveData &rArr; UART_WIFI_ReceiveData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ReceiveData
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_tls_mbedtls.o(i.TLSConnectNetwork)
</UL>
<P><STRONG><a name="[89]"></a>mbedtls_net_recv_timeout</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, mbedtls_net.o(i.mbedtls_net_recv_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_recv_timeout &rArr; WIFI_ReceiveData &rArr; M0_WIFI_ReceiveData &rArr; UART_WIFI_ReceiveData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ReceiveData
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_tls_mbedtls.o(i.TLSConnectNetwork)
</UL>
<P><STRONG><a name="[8b]"></a>mbedtls_net_send</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, mbedtls_net.o(i.mbedtls_net_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_send &rArr; WIFI_SendData &rArr; M0_WIFI_SendData &rArr; UART_WIFI_SendData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendData
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_tls_mbedtls.o(i.TLSConnectNetwork)
</UL>
<P><STRONG><a name="[422]"></a>mbedtls_oid_get_md_alg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(i.mbedtls_oid_get_md_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_oid_get_md_alg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>

<P><STRONG><a name="[423]"></a>mbedtls_pem_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pem.o(i.mbedtls_pem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mbedtls_pem_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[49b]"></a>mbedtls_pem_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pem.o(i.mbedtls_pem_init))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[425]"></a>mbedtls_pem_read_buffer</STRONG> (Thumb, 586 bytes, Stack size 112 bytes, pem.o(i.mbedtls_pem_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 2748 + Unknown Stack Size
<LI>Call Chain = mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_crypt_cbc_alt &rArr; ali_aes_init &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[432]"></a>mbedtls_pk_can_do</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_can_do))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
</UL>

<P><STRONG><a name="[51b]"></a>mbedtls_pk_encrypt</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, pk.o(i.mbedtls_pk_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_pk_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
</UL>

<P><STRONG><a name="[42d]"></a>mbedtls_pk_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pk.o(i.mbedtls_pk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[53a]"></a>mbedtls_pk_get_bitlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_bitlen))
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
</UL>

<P><STRONG><a name="[49d]"></a>mbedtls_pk_get_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[42a]"></a>mbedtls_pk_info_from_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pk.o(i.mbedtls_pk_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[428]"></a>mbedtls_pk_parse_subpubkey</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, pkparse.o(i.mbedtls_pk_parse_subpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_pk_parse_subpubkey &rArr; pk_get_pk_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[42b]"></a>mbedtls_pk_setup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pk.o(i.mbedtls_pk_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[42e]"></a>mbedtls_pk_sign</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, pk.o(i.mbedtls_pk_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_pk_sign &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[430]"></a>mbedtls_pk_verify</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk.o(i.mbedtls_pk_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[431]"></a>mbedtls_pk_verify_ext</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, pk.o(i.mbedtls_pk_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[265]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_verify
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ali_rsa_public_encrypt_pre
</UL>

<P><STRONG><a name="[2a4]"></a>mbedtls_rsa_free</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_rsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_threading_free_alt
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_verify
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_public_encrypt
</UL>

<P><STRONG><a name="[434]"></a>mbedtls_rsa_free_alt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbedtls_alt.o(i.mbedtls_rsa_free_alt))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
</UL>

<P><STRONG><a name="[2a5]"></a>mbedtls_rsa_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_rsa_init &rArr; mbedtls_threading_set_alt
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_threading_set_alt
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_verify
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_public_encrypt
</UL>

<P><STRONG><a name="[436]"></a>mbedtls_rsa_init_alt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mbedtls_alt.o(i.mbedtls_rsa_init_alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_init_alt
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
</UL>

<P><STRONG><a name="[2a7]"></a>mbedtls_rsa_pkcs1_encrypt</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_pkcs1_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_public_encrypt
</UL>

<P><STRONG><a name="[2a9]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_pkcs1_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3488 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_verify
</UL>

<P><STRONG><a name="[43b]"></a>mbedtls_rsa_private</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, rsa.o(i.mbedtls_rsa_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>

<P><STRONG><a name="[43d]"></a>mbedtls_rsa_public</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>

<P><STRONG><a name="[438]"></a>mbedtls_rsa_rsaes_oaep_encrypt</STRONG> (Thumb, 276 bytes, Stack size 72 bytes, rsa.o(i.mbedtls_rsa_rsaes_oaep_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[437]"></a>mbedtls_rsa_rsaes_pkcs1_v15_encrypt</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_rsaes_pkcs1_v15_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2304 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[439]"></a>mbedtls_rsa_rsassa_pkcs1_v15_verify</STRONG> (Thumb, 404 bytes, Stack size 1096 bytes, rsa.o(i.mbedtls_rsa_rsassa_pkcs1_v15_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3344 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[43a]"></a>mbedtls_rsa_rsassa_pss_verify</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3448 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[443]"></a>mbedtls_rsa_rsassa_pss_verify_ext</STRONG> (Thumb, 426 bytes, Stack size 1152 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 3400 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
</UL>

<P><STRONG><a name="[e5]"></a>mbedtls_sha1</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, sha1.o(i.mbedtls_sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mbedtls_sha1 &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[44c]"></a>mbedtls_sha1_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_clone_wrap
</UL>

<P><STRONG><a name="[44a]"></a>mbedtls_sha1_finish</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, sha1.o(i.mbedtls_sha1_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
</UL>

<P><STRONG><a name="[44b]"></a>mbedtls_sha1_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_free))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
</UL>

<P><STRONG><a name="[447]"></a>mbedtls_sha1_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_init))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
</UL>

<P><STRONG><a name="[44d]"></a>mbedtls_sha1_process</STRONG> (Thumb, 4670 bytes, Stack size 144 bytes, sha1.o(i.mbedtls_sha1_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_wrap
</UL>

<P><STRONG><a name="[448]"></a>mbedtls_sha1_starts</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_starts))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
</UL>

<P><STRONG><a name="[449]"></a>mbedtls_sha1_update</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sha1.o(i.mbedtls_sha1_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
</UL>

<P><STRONG><a name="[44e]"></a>mbedtls_sha256</STRONG> (Thumb, 54 bytes, Stack size 128 bytes, sha256.o(i.mbedtls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
</UL>

<P><STRONG><a name="[454]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
</UL>

<P><STRONG><a name="[452]"></a>mbedtls_sha256_finish</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, sha256.o(i.mbedtls_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
</UL>

<P><STRONG><a name="[453]"></a>mbedtls_sha256_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_free))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
</UL>

<P><STRONG><a name="[44f]"></a>mbedtls_sha256_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_init))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
</UL>

<P><STRONG><a name="[455]"></a>mbedtls_sha256_process</STRONG> (Thumb, 2106 bytes, Stack size 324 bytes, sha256.o(i.mbedtls_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = mbedtls_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
</UL>

<P><STRONG><a name="[450]"></a>mbedtls_sha256_starts</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_starts))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
</UL>

<P><STRONG><a name="[451]"></a>mbedtls_sha256_update</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sha256.o(i.mbedtls_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha256
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
</UL>

<P><STRONG><a name="[483]"></a>mbedtls_ssl_ciphersuite_from_id</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_ciphersuite_from_id))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
</UL>

<P><STRONG><a name="[456]"></a>mbedtls_ssl_close_notify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_close_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_disconnect
</UL>

<P><STRONG><a name="[22d]"></a>mbedtls_ssl_conf_authmode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_authmode))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[22e]"></a>mbedtls_ssl_conf_ca_chain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_ca_chain))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[230]"></a>mbedtls_ssl_conf_dbg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_dbg))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[22b]"></a>mbedtls_ssl_conf_max_version</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_max_version))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[22c]"></a>mbedtls_ssl_conf_min_version</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_min_version))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[530]"></a>mbedtls_ssl_conf_read_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_read_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_read
</UL>

<P><STRONG><a name="[22f]"></a>mbedtls_ssl_conf_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_conf_rng))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[22a]"></a>mbedtls_ssl_config_defaults</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_config_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_config_defaults &rArr; mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[45a]"></a>mbedtls_ssl_config_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_config_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_config_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_disconnect
</UL>

<P><STRONG><a name="[287]"></a>mbedtls_ssl_config_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_config_init))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ssl_client_init
</UL>

<P><STRONG><a name="[45c]"></a>mbedtls_ssl_derive_keys</STRONG> (Thumb, 566 bytes, Stack size 376 bytes, ssl_tls.o(i.mbedtls_ssl_derive_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[45f]"></a>mbedtls_ssl_dtls_replay_check</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_dtls_replay_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_dtls_replay_check &rArr; ssl_load_six_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_load_six_bytes
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
</UL>

<P><STRONG><a name="[461]"></a>mbedtls_ssl_dtls_replay_update</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_dtls_replay_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_dtls_replay_update &rArr; ssl_load_six_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_load_six_bytes
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[462]"></a>mbedtls_ssl_fetch_input</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_fetch_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_timer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[457]"></a>mbedtls_ssl_flush_output</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_flush_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_flush_output
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_ep_len
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hdr_len
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[468]"></a>mbedtls_ssl_free</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_free &rArr; mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_disconnect
</UL>

<P><STRONG><a name="[235]"></a>mbedtls_ssl_get_verify_result</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_get_verify_result))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[46c]"></a>mbedtls_ssl_handle_message_type</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_handle_message_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_handle_message_type &rArr; mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[234]"></a>mbedtls_ssl_handshake</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[46f]"></a>mbedtls_ssl_handshake_client_step</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, ssl_cli.o(i.mbedtls_ssl_handshake_client_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>

<P><STRONG><a name="[46a]"></a>mbedtls_ssl_handshake_free</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_handshake_free &rArr; ssl_flight_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[46e]"></a>mbedtls_ssl_handshake_step</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</UL>

<P><STRONG><a name="[480]"></a>mbedtls_ssl_handshake_wrapup</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_handshake_wrapup))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_handshake_wrapup &rArr; ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_ssl_handshake_free &rArr; ssl_flight_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[51c]"></a>mbedtls_ssl_hash_from_md_alg</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_hash_from_md_alg))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
</UL>

<P><STRONG><a name="[286]"></a>mbedtls_ssl_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_init))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ssl_client_init
</UL>

<P><STRONG><a name="[459]"></a>mbedtls_ssl_list_ciphersuites</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ssl_ciphersuites.o(i.mbedtls_ssl_list_ciphersuites))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[518]"></a>mbedtls_ssl_optimize_checksum</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_optimize_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[472]"></a>mbedtls_ssl_parse_certificate</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, ssl_tls.o(i.mbedtls_ssl_parse_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[47e]"></a>mbedtls_ssl_parse_change_cipher_spec</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_parse_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_parse_change_cipher_spec &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[47f]"></a>mbedtls_ssl_parse_finished</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ssl_tls.o(i.mbedtls_ssl_parse_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_parse_finished &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[46d]"></a>mbedtls_ssl_prepare_handshake_record</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_prepare_handshake_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>

<P><STRONG><a name="[489]"></a>mbedtls_ssl_read</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_read
</UL>

<P><STRONG><a name="[475]"></a>mbedtls_ssl_read_record</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_read_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_handshake_status
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[48a]"></a>mbedtls_ssl_read_record_layer</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_read_record_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_update
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hdr_len
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[517]"></a>mbedtls_ssl_read_version</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_read_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_read_version
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
</UL>

<P><STRONG><a name="[477]"></a>mbedtls_ssl_recv_flight_completed</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_recv_flight_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_recv_flight_completed &rArr; ssl_flight_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_free
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
</UL>

<P><STRONG><a name="[465]"></a>mbedtls_ssl_resend</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_swap_epochs
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
</UL>

<P><STRONG><a name="[48f]"></a>mbedtls_ssl_reset_checksum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_reset_checksum))
<BR><BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
</UL>

<P><STRONG><a name="[458]"></a>mbedtls_ssl_send_alert_message</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_send_alert_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_fatal_handshake_failure
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
</UL>

<P><STRONG><a name="[490]"></a>mbedtls_ssl_send_fatal_handshake_failure</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_send_fatal_handshake_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_send_fatal_handshake_failure &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[491]"></a>mbedtls_ssl_send_flight_completed</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_send_flight_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_send_flight_completed &rArr; ssl_set_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
</UL>

<P><STRONG><a name="[46b]"></a>mbedtls_ssl_session_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_session_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[492]"></a>mbedtls_ssl_session_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_session_init))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[233]"></a>mbedtls_ssl_set_bio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_set_bio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_set_bio
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[232]"></a>mbedtls_ssl_set_hostname</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_set_hostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_set_hostname &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[231]"></a>mbedtls_ssl_setup</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_setup &rArr; ssl_handshake_init &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[494]"></a>mbedtls_ssl_sig_from_pk</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_sig_from_pk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_sig_from_pk
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[469]"></a>mbedtls_ssl_transform_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_transform_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_transform_free &rArr; mbedtls_md_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[48b]"></a>mbedtls_ssl_update_handshake_status</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_update_handshake_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_update_handshake_status
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[496]"></a>mbedtls_ssl_write</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_write
</UL>

<P><STRONG><a name="[478]"></a>mbedtls_ssl_write_certificate</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ssl_tls.o(i.mbedtls_ssl_write_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_write_certificate &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[47c]"></a>mbedtls_ssl_write_change_cipher_spec</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_write_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_write_change_cipher_spec &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[47d]"></a>mbedtls_ssl_write_finished</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, ssl_tls.o(i.mbedtls_ssl_write_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_write_finished &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_flight_completed
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[47a]"></a>mbedtls_ssl_write_record</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_write_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_flight_append
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hdr_len
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
</UL>

<P><STRONG><a name="[498]"></a>mbedtls_ssl_write_version</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_write_version))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[433]"></a>mbedtls_threading_free_alt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, threading.o(i.mbedtls_threading_free_alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_threading_free_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[435]"></a>mbedtls_threading_set_alt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, threading.o(i.mbedtls_threading_set_alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_threading_set_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>

<P><STRONG><a name="[182]"></a>mbedtls_x509_crt_free</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, x509_crt.o(i.mbedtls_x509_crt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = mbedtls_x509_crt_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_network_ssl_disconnect
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Establish
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[288]"></a>mbedtls_x509_crt_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, x509_crt.o(i.mbedtls_x509_crt_init))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ssl_client_init
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[289]"></a>mbedtls_x509_crt_parse</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, x509_crt.o(i.mbedtls_x509_crt_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 2812 + Unknown Stack Size
<LI>Call Chain = mbedtls_x509_crt_parse &rArr; mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_crypt_cbc_alt &rArr; ali_aes_init &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ssl_client_init
</UL>

<P><STRONG><a name="[485]"></a>mbedtls_x509_crt_parse_der</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, x509_crt.o(i.mbedtls_x509_crt_parse_der))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_x509_get_name &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[486]"></a>mbedtls_x509_crt_verify_with_profile</STRONG> (Thumb, 234 bytes, Stack size 80 bytes, x509_crt.o(i.mbedtls_x509_crt_verify_with_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[4a3]"></a>mbedtls_x509_get_alg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x509.o(i.mbedtls_x509_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_x509_get_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4a4]"></a>mbedtls_x509_get_ext</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, x509.o(i.mbedtls_x509_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_x509_get_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4a5]"></a>mbedtls_x509_get_name</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, x509.o(i.mbedtls_x509_get_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = mbedtls_x509_get_name &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4a7]"></a>mbedtls_x509_get_serial</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, x509.o(i.mbedtls_x509_get_serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_x509_get_serial &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4a8]"></a>mbedtls_x509_get_sig</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_x509_get_sig &rArr; mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4a9]"></a>mbedtls_x509_get_sig_alg</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, x509.o(i.mbedtls_x509_get_sig_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_x509_get_sig_alg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[537]"></a>mbedtls_x509_time_is_future</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x509.o(i.mbedtls_x509_time_is_future))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[536]"></a>mbedtls_x509_time_is_past</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x509.o(i.mbedtls_x509_time_is_past))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[4aa]"></a>mqtt_client_example</STRONG> (Thumb, 740 bytes, Stack size 696 bytes, mqtt-example-b_l475e.o(i.mqtt_client_example))
<BR><BR>[Stack]<UL><LI>Max Depth = 4280 + Unknown Stack Size
<LI>Call Chain = mqtt_client_example &rArr; ota_init &rArr; ota_service_event &rArr; ota_regist_upgrade &rArr; ota_post_version_msg &rArr; ota_status_post &rArr; platform_ota_status_post &rArr; IOT_MQTT_Yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sensors
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Yield
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Unsubscribe
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Subscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Destroy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_SetupConnInfo
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_service_event
</UL>

<P><STRONG><a name="[3b9]"></a>mutex_create</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, k_mutex.o(i.mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
</UL>

<P><STRONG><a name="[4ad]"></a>mutex_pri_look</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, k_mutex.o(i.mutex_pri_look))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[3d3]"></a>mutex_task_pri_reset</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, k_mutex.o(i.mutex_task_pri_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[361]"></a>netmgr_clear_ap_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, netmgr.o(i.netmgr_clear_ap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336 + Unknown Stack Size
<LI>Call Chain = netmgr_clear_ap_config &rArr; clear_wifi_ssid &rArr; aos_kv_del &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wifi_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_netmgr_cmd
</UL>

<P><STRONG><a name="[308]"></a>netmgr_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, netmgr.o(i.netmgr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352 + Unknown Stack Size
<LI>Call Chain = netmgr_init &rArr; read_persistent_conf &rArr; aos_kv_get &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_install_event
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_get_default_module
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_register_command
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_event_filter
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_persistent_conf
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_autoconfig_plugin
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[32e]"></a>netmgr_set_ap_config</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, netmgr.o(i.netmgr_set_ap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360 + Unknown Stack Size
<LI>Call Chain = netmgr_set_ap_config &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_access_security
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_netmgr_cmd
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_smart_config_start
</UL>

<P><STRONG><a name="[309]"></a>netmgr_start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, netmgr.o(i.netmgr_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = netmgr_start &rArr; aos_post_event &rArr; input_add_event &rArr; aos_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_event
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mesh
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_mesh
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_wifi_config_start
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_valid_ap
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_netmgr_cmd
</UL>

<P><STRONG><a name="[316]"></a>ota_cancel_update_packet</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ota_update_manifest.o(i.ota_cancel_update_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ota_cancel_update_packet &rArr; ota_if_cancel &rArr; ota_is_cancelable &rArr; ota_get_status &rArr; ota_mutex_unlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_status
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_if_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_update
</UL>

<P><STRONG><a name="[4bb]"></a>ota_do_update_packet</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, ota_update_manifest.o(i.ota_do_update_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 3536 + Unknown Stack Size
<LI>Call Chain = ota_do_update_packet &rArr; ota_status_post &rArr; platform_ota_status_post &rArr; IOT_MQTT_Yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_status_post
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_status_init
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_status_deinit
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_status
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_if_need
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_download_url
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_action
</UL>

<P><STRONG><a name="[4c1]"></a>ota_download</STRONG> (Thumb, 980 bytes, Stack size 1664 bytes, ota_download.o(i.ota_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056 + Unknown Stack Size
<LI>Call Chain = ota_download &rArr; ota_socket_connect &rArr; WIFI_OpenClientConnection &rArr; M0_WIFI_StartClientConnection &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_send
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_recv
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_connect
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_close
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_socket_check_conn
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Update
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_gethost_info
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_state
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_update_breakpoint
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_cur_MD5
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_last_MD5_context
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_last_MD5
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_update_breakpoint
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_status
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
</UL>

<P><STRONG><a name="[af]"></a>ota_download_start</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, ota_update_manifest.o(i.ota_download_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 3528 + Unknown Stack Size
<LI>Call Chain = ota_download_start &rArr; ota_status_post &rArr; platform_ota_status_post &rArr; IOT_MQTT_Yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_status_post
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_status_deinit
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_status
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_reboot
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_update_type
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_update_breakpoint
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_status
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_md5
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_download_url
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_msg_temp
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_hal_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_update_manifest.o(i.ota_do_update_packet)
</UL>
<P><STRONG><a name="[4d6]"></a>ota_get_dev_version</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ota_version.o(i.ota_get_dev_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336 + Unknown Stack Size
<LI>Call Chain = ota_get_dev_version &rArr; aos_kv_get &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_post_version_msg
</UL>

<P><STRONG><a name="[4c4]"></a>ota_get_last_MD5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, download_common.o(i.ota_get_last_MD5))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
</UL>

<P><STRONG><a name="[4c5]"></a>ota_get_last_MD5_context</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, download_common.o(i.ota_get_last_MD5_context))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
</UL>

<P><STRONG><a name="[4d7]"></a>ota_get_ota_version</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ota_version.o(i.ota_get_ota_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336 + Unknown Stack Size
<LI>Call Chain = ota_get_ota_version &rArr; aos_kv_get &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_version
</UL>

<P><STRONG><a name="[4cb]"></a>ota_get_status</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ota_util.o(i.ota_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ota_get_status &rArr; ota_mutex_unlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_unlock
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_is_cancelable
</UL>

<P><STRONG><a name="[4da]"></a>ota_get_system_version</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ota_version.o(i.ota_get_system_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ota_get_system_version &rArr; aos_get_os_version
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_os_version
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_result_post
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_post_version_msg
</UL>

<P><STRONG><a name="[4c3]"></a>ota_get_update_breakpoint</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, download_common.o(i.ota_get_update_breakpoint))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
</UL>

<P><STRONG><a name="[4d2]"></a>ota_get_update_type</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ota_util.o(i.ota_get_update_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ota_get_update_type &rArr; ota_mutex_unlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_unlock
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
</UL>

<P><STRONG><a name="[4db]"></a>ota_get_version</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ota_util.o(i.ota_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344 + Unknown Stack Size
<LI>Call Chain = ota_get_version &rArr; ota_get_ota_version &rArr; aos_kv_get &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_unlock
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_lock
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_ota_version
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_post_version_msg
</UL>

<P><STRONG><a name="[4d0]"></a>ota_hal_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ota_service.o(i.ota_hal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ota_hal_init &rArr; hal_ota_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
</UL>

<P><STRONG><a name="[4bd]"></a>ota_if_need</STRONG> (Thumb, 210 bytes, Stack size 96 bytes, ota_update_manifest.o(i.ota_if_need))
<BR><BR>[Stack]<UL><LI>Max Depth = 2448 + Unknown Stack Size
<LI>Call Chain = ota_if_need &rArr; ota_set_ota_version &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_app_version
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_update_type
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_ota_version
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_do_update_packet
</UL>

<P><STRONG><a name="[4e2]"></a>ota_mutex_destroy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ota_platform_os.o(i.ota_mutex_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ota_mutex_destroy &rArr; aos_mutex_free &rArr; krhino_mutex_del &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_status_deinit
</UL>

<P><STRONG><a name="[4e3]"></a>ota_mutex_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ota_platform_os.o(i.ota_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ota_mutex_init &rArr; aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_status_init
</UL>

<P><STRONG><a name="[4d8]"></a>ota_mutex_lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ota_platform_os.o(i.ota_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ota_mutex_lock &rArr; aos_mutex_lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_version
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_update_type
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_status
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_version
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_update_type
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_status
</UL>

<P><STRONG><a name="[4d9]"></a>ota_mutex_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ota_platform_os.o(i.ota_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ota_mutex_unlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_version
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_update_type
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_status
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_version
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_update_type
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_status
</UL>

<P><STRONG><a name="[4e4]"></a>ota_post_version_msg</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, ota_update_manifest.o(i.ota_post_version_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 3536 + Unknown Stack Size
<LI>Call Chain = ota_post_version_msg &rArr; ota_status_post &rArr; platform_ota_status_post &rArr; IOT_MQTT_Yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_status_post
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_version
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_status
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_dev_version
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_result_post
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_version
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_system_version
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_dev_version
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_regist_upgrade
</UL>

<P><STRONG><a name="[4d3]"></a>ota_reboot</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ota_platform_os.o(i.ota_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ota_reboot &rArr; aos_reboot &rArr; hal_reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_reboot
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
</UL>

<P><STRONG><a name="[4e8]"></a>ota_regist_upgrade</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ota_service.o(i.ota_regist_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 3544 + Unknown Stack Size
<LI>Call Chain = ota_regist_upgrade &rArr; ota_post_version_msg &rArr; ota_status_post &rArr; platform_ota_status_post &rArr; IOT_MQTT_Yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_subscribe_upgrade
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_cancel_upgrade
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_post_version_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_service_event
</UL>

<P><STRONG><a name="[4e6]"></a>ota_result_post</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ota_util.o(i.ota_result_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ota_result_post &rArr; platform_ota_result_post &rArr; ota_mqtt_publish &rArr; IOT_MQTT_Publish &rArr; iotx_mc_publish &rArr; MQTTPublish &rArr; iotx_mc_push_pubInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_result_post
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_post_version_msg
</UL>

<P><STRONG><a name="[b2]"></a>ota_service_event</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ota_service.o(i.ota_service_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 3560 + Unknown Stack Size
<LI>Call Chain = ota_service_event &rArr; ota_regist_upgrade &rArr; ota_post_version_msg &rArr; ota_status_post &rArr; platform_ota_status_post &rArr; IOT_MQTT_Yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_init
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_regist_upgrade
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_parmas
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_service.o(i.ota_service_init)
</UL>
<P><STRONG><a name="[2c5]"></a>ota_service_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ota_service.o(i.ota_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ota_service_init &rArr; aos_register_event_filter &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_event_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[4c7]"></a>ota_set_cur_MD5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, download_common.o(i.ota_set_cur_MD5))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
</UL>

<P><STRONG><a name="[4e7]"></a>ota_set_dev_version</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ota_version.o(i.ota_set_dev_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352 + Unknown Stack Size
<LI>Call Chain = ota_set_dev_version &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_post_version_msg
</UL>

<P><STRONG><a name="[4df]"></a>ota_set_ota_version</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ota_version.o(i.ota_set_ota_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352 + Unknown Stack Size
<LI>Call Chain = ota_set_ota_version &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_version
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_if_need
</UL>

<P><STRONG><a name="[4ba]"></a>ota_set_status</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ota_util.o(i.ota_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ota_set_status &rArr; ota_mutex_unlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_unlock
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_post_version_msg
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_do_update_packet
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_cancel_update_packet
</UL>

<P><STRONG><a name="[4ce]"></a>ota_set_update_breakpoint</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, download_common.o(i.ota_set_update_breakpoint))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
</UL>

<P><STRONG><a name="[4de]"></a>ota_set_update_type</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ota_util.o(i.ota_set_update_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ota_set_update_type &rArr; ota_mutex_unlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_unlock
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_if_need
</UL>

<P><STRONG><a name="[4e5]"></a>ota_set_version</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ota_util.o(i.ota_set_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360 + Unknown Stack Size
<LI>Call Chain = ota_set_version &rArr; ota_set_ota_version &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_unlock
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_lock
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_ota_version
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_parse_response
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_post_version_msg
</UL>

<P><STRONG><a name="[4ca]"></a>ota_socket_check_conn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ota_socket.o(i.ota_socket_check_conn))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
</UL>

<P><STRONG><a name="[4cf]"></a>ota_socket_close</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ota_socket.o(i.ota_socket_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ota_socket_close &rArr; WIFI_CloseClientConnection &rArr; M0_WIFI_StopConn &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_CloseClientConnection
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
</UL>

<P><STRONG><a name="[4c2]"></a>ota_socket_connect</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ota_socket.o(i.ota_socket_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ota_socket_connect &rArr; WIFI_OpenClientConnection &rArr; M0_WIFI_StartClientConnection &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_OpenClientConnection
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetHostAddress
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
</UL>

<P><STRONG><a name="[4cc]"></a>ota_socket_recv</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, ota_socket.o(i.ota_socket_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ota_socket_recv &rArr; WIFI_ReceiveData &rArr; M0_WIFI_ReceiveData &rArr; UART_WIFI_ReceiveData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ReceiveData
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
</UL>

<P><STRONG><a name="[4c8]"></a>ota_socket_send</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ota_socket.o(i.ota_socket_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ota_socket_send &rArr; WIFI_SendData &rArr; M0_WIFI_SendData &rArr; UART_WIFI_SendData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendData
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
</UL>

<P><STRONG><a name="[4bf]"></a>ota_status_deinit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ota_util.o(i.ota_status_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ota_status_deinit &rArr; ota_mutex_destroy &rArr; aos_mutex_free &rArr; krhino_mutex_del &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_do_update_packet
</UL>

<P><STRONG><a name="[4bc]"></a>ota_status_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ota_util.o(i.ota_status_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ota_status_init &rArr; ota_mutex_init &rArr; aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_do_update_packet
</UL>

<P><STRONG><a name="[4be]"></a>ota_status_post</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ota_util.o(i.ota_status_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 3504 + Unknown Stack Size
<LI>Call Chain = ota_status_post &rArr; platform_ota_status_post &rArr; IOT_MQTT_Yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_status_post
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_post_version_msg
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_do_update_packet
</UL>

<P><STRONG><a name="[4ef]"></a>parse_number</STRONG> (Thumb, 424 bytes, Stack size 80 bytes, cjson.o(i.parse_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = parse_number &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[4f5]"></a>pend_list_reorder</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, k_pend.o(i.pend_list_reorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pend_list_reorder &rArr; pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</UL>

<P><STRONG><a name="[3c0]"></a>pend_state_end_proc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, k_pend.o(i.pend_state_end_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_state_end_proc &rArr; k_err_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
</UL>

<P><STRONG><a name="[3bb]"></a>pend_task_rm</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, k_pend.o(i.pend_task_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
</UL>

<P><STRONG><a name="[3c1]"></a>pend_task_wakeup</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, k_pend.o(i.pend_task_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
</UL>

<P><STRONG><a name="[3bf]"></a>pend_to_blk_obj</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, k_pend.o(i.pend_to_blk_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
</UL>

<P><STRONG><a name="[4ea]"></a>platform_ota_cancel_upgrade</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ota_transport.o(i.platform_ota_cancel_upgrade))
<BR><BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_regist_upgrade
</UL>

<P><STRONG><a name="[37f]"></a>platform_ota_get_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ota_transport.o(i.platform_ota_get_id))
<BR><BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_if_cancel
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_parmas
</UL>

<P><STRONG><a name="[4ec]"></a>platform_ota_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ota_transport.o(i.platform_ota_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = platform_ota_init &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_service_event
</UL>

<P><STRONG><a name="[315]"></a>platform_ota_parse_cancel_responce</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ota_transport.o(i.platform_ota_parse_cancel_responce))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_update
</UL>

<P><STRONG><a name="[4f8]"></a>platform_ota_parse_response</STRONG> (Thumb, 576 bytes, Stack size 56 bytes, ota_transport.o(i.platform_ota_parse_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416 + Unknown Stack Size
<LI>Call Chain = platform_ota_parse_response &rArr; ota_set_version &rArr; ota_set_ota_version &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetErrorPtr
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_capital_letter
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_version
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_action
</UL>

<P><STRONG><a name="[4eb]"></a>platform_ota_result_post</STRONG> (Thumb, 128 bytes, Stack size 144 bytes, ota_transport.o(i.platform_ota_result_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = platform_ota_result_post &rArr; ota_mqtt_publish &rArr; IOT_MQTT_Publish &rArr; iotx_mc_publish &rArr; MQTTPublish &rArr; iotx_mc_push_pubInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mqtt_publish
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_gen_info_msg
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_system_version
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_result_post
</UL>

<P><STRONG><a name="[4ed]"></a>platform_ota_status_post</STRONG> (Thumb, 234 bytes, Stack size 280 bytes, ota_transport.o(i.platform_ota_status_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 3496 + Unknown Stack Size
<LI>Call Chain = platform_ota_status_post &rArr; IOT_MQTT_Yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Yield
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mqtt_publish
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_gen_report_msg
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_check_progress
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_status_post
</UL>

<P><STRONG><a name="[4e9]"></a>platform_ota_subscribe_upgrade</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, ota_transport.o(i.platform_ota_subscribe_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = platform_ota_subscribe_upgrade &rArr; IOT_MQTT_Subscribe &rArr; iotx_mc_subscribe &rArr; MQTTSubscribe &rArr; iotx_mc_push_subInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Subscribe
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mqtt_gen_topic_name
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_regist_upgrade
</UL>

<P><STRONG><a name="[32c]"></a>preferred_cpu_ready_task_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, k_sched.o(i.preferred_cpu_ready_task_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = preferred_cpu_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
</UL>

<P><STRONG><a name="[334]"></a>print_block</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, k_mm_debug.o(i.print_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = print_block &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_map
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_free_map
</UL>

<P><STRONG><a name="[1f0]"></a>readChar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqttpacket.o(i.readChar))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[1f2]"></a>readInt</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mqttpacket.o(i.readInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[1f5]"></a>readMQTTLenString</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, mqttpacket.o(i.readMQTTLenString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readMQTTLenString &rArr; readInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>

<P><STRONG><a name="[500]"></a>read_tcp</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, utils_net.o(i.read_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = read_tcp &rArr; HAL_TCP_Read &rArr; WIFI_ReceiveData &rArr; M0_WIFI_ReceiveData &rArr; UART_WIFI_ReceiveData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_net_read
</UL>

<P><STRONG><a name="[4f7]"></a>ready_list_add</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, k_sched.o(i.ready_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
</UL>

<P><STRONG><a name="[502]"></a>ready_list_add_head</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, k_sched.o(i.ready_list_add_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ready_list_add_head &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ready_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</UL>

<P><STRONG><a name="[501]"></a>ready_list_add_tail</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, k_sched.o(i.ready_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ready_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</UL>

<P><STRONG><a name="[524]"></a>ready_list_head_to_tail</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, k_sched.o(i.ready_list_head_to_tail))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_update
</UL>

<P><STRONG><a name="[3d0]"></a>ready_list_rm</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, k_sched.o(i.ready_list_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ready_list_rm &rArr; k_err_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_find_first_bit
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
</UL>

<P><STRONG><a name="[4fe]"></a>ringbuf_init</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, k_ringbuf.o(i.ringbuf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
</UL>

<P><STRONG><a name="[50a]"></a>ringbuf_is_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, k_ringbuf.o(i.ringbuf_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
</UL>

<P><STRONG><a name="[3c5]"></a>ringbuf_pop</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, k_ringbuf.o(i.ringbuf_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ringbuf_pop &rArr; ringbuf_headlen_decompress &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_headlen_decompress
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_is_empty
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
</UL>

<P><STRONG><a name="[509]"></a>ringbuf_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, k_ringbuf.o(i.ringbuf_reset))
<BR><BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_init
</UL>

<P><STRONG><a name="[50b]"></a>rsa_decrypt_alt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mbedtls_alt.o(i.rsa_decrypt_alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rsa_decrypt_alt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
</UL>

<P><STRONG><a name="[50c]"></a>rsa_encrypt_alt</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, mbedtls_alt.o(i.rsa_encrypt_alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2648 + Unknown Stack Size
<LI>Call Chain = rsa_encrypt_alt &rArr; ali_rsa_public_encrypt &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_public_encrypt
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_init_pubkey
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_get_pubkey_size
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
</UL>

<P><STRONG><a name="[50d]"></a>rsa_sign_alt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mbedtls_alt.o(i.rsa_sign_alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rsa_sign_alt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
</UL>

<P><STRONG><a name="[50e]"></a>rsa_verify_alt</STRONG> (Thumb, 322 bytes, Stack size 80 bytes, mbedtls_alt.o(i.rsa_verify_alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3816 + Unknown Stack Size
<LI>Call Chain = rsa_verify_alt &rArr; ali_rsa_verify &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_verify
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_init_pubkey
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_get_pubkey_size
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
</UL>

<P><STRONG><a name="[3b3]"></a>runqueue_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_sched.o(i.runqueue_init))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[4cd]"></a>save_state</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, download_common.o(i.save_state))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download
</UL>

<P><STRONG><a name="[2]"></a>soc_err_proc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, soc_impl.o(i.soc_err_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = soc_err_proc &rArr; soc_print_stack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_impl.o(.data)
</UL>
<P><STRONG><a name="[3d9]"></a>soc_get_cur_sp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, soc_impl.o(i.soc_get_cur_sp))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_stack_cur_free
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
</UL>

<P><STRONG><a name="[251]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[51d]"></a>stm32_soc_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, soc_init.o(i.stm32_soc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = stm32_soc_init &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[3d4]"></a>task_dyn_create</STRONG> (Thumb, 142 bytes, Stack size 88 bytes, k_task.o(i.task_dyn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
</UL>

<P><STRONG><a name="[3be]"></a>task_pri_change</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, k_task.o(i.task_pri_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[3d7]"></a>task_resume</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, k_task.o(i.task_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = task_resume &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_resume
</UL>

<P><STRONG><a name="[ae]"></a>tftp_ota_thread</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cli.o(i.tftp_ota_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tftp_ota_thread &rArr; aos_task_exit &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(i.ota_cmd)
</UL>
<P><STRONG><a name="[3b4]"></a>tick_list_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, k_tick.o(i.tick_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[3d8]"></a>tick_list_insert</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, k_tick.o(i.tick_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
</UL>

<P><STRONG><a name="[3d1]"></a>tick_list_rm</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, k_tick.o(i.tick_list_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tick_list_rm
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
</UL>

<P><STRONG><a name="[3da]"></a>tick_list_update</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, k_tick.o(i.tick_list_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
</UL>

<P><STRONG><a name="[3db]"></a>time_slice_update</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, k_sched.o(i.time_slice_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = time_slice_update
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_head_to_tail
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ready_list_empty
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
</UL>

<P><STRONG><a name="[2c4]"></a>trace_start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, trace_impl.o(i.trace_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = trace_start &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[52d]"></a>utils_hb2hex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, utils_md5.o(i.utils_hb2hex))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha1
</UL>

<P><STRONG><a name="[26e]"></a>utils_hmac_sha1</STRONG> (Thumb, 214 bytes, Stack size 272 bytes, utils_hmac.o(i.utils_hmac_sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = utils_hmac_sha1 &rArr; utils_sha1_finish &rArr; utils_sha1_update &rArr; utils_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha1_update
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha1_starts
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha1_init
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha1_finish
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hb2hex
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_hmac_signature
</UL>

<P><STRONG><a name="[98]"></a>utils_net_read</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, utils_net.o(i.utils_net_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = utils_net_read &rArr; read_ssl &rArr; HAL_SSL_Read &rArr; utils_network_ssl_read &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcp
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ssl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils_net.o(i.iotx_net_init)
</UL>
<P><STRONG><a name="[99]"></a>utils_net_write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, utils_net.o(i.utils_net_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = utils_net_write &rArr; write_ssl &rArr; HAL_SSL_Write &rArr; utils_network_ssl_write &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tcp
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ssl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils_net.o(i.iotx_net_init)
</UL>
<P><STRONG><a name="[17c]"></a>utils_network_ssl_disconnect</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hal_tls_mbedtls.o(i.utils_network_ssl_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = utils_network_ssl_disconnect &rArr; mbedtls_net_free &rArr; WIFI_CloseClientConnection &rArr; M0_WIFI_StopConn &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Establish
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Destroy
</UL>

<P><STRONG><a name="[184]"></a>utils_network_ssl_read</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, hal_tls_mbedtls.o(i.utils_network_ssl_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = utils_network_ssl_read &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_read_timeout
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Read
</UL>

<P><STRONG><a name="[186]"></a>utils_network_ssl_write</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, hal_tls_mbedtls.o(i.utils_network_ssl_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = utils_network_ssl_write &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Write
</UL>

<P><STRONG><a name="[52c]"></a>utils_sha1_finish</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, utils_sha1.o(i.utils_sha1_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = utils_sha1_finish &rArr; utils_sha1_update &rArr; utils_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha1_update
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha1
</UL>

<P><STRONG><a name="[529]"></a>utils_sha1_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utils_sha1.o(i.utils_sha1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utils_sha1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha1
</UL>

<P><STRONG><a name="[531]"></a>utils_sha1_process</STRONG> (Thumb, 6420 bytes, Stack size 92 bytes, utils_sha1.o(i.utils_sha1_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = utils_sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha1_update
</UL>

<P><STRONG><a name="[52a]"></a>utils_sha1_starts</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, utils_sha1.o(i.utils_sha1_starts))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha1
</UL>

<P><STRONG><a name="[52b]"></a>utils_sha1_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, utils_sha1.o(i.utils_sha1_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = utils_sha1_update &rArr; utils_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha1_process
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha1_finish
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha1
</UL>

<P><STRONG><a name="[1bd]"></a>utils_time_countdown_ms</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, utils_timer.o(i.utils_time_countdown_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = utils_time_countdown_ms &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Yield
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_connect
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRePublish
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[1c2]"></a>utils_time_is_expired</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, utils_timer.o(i.utils_time_is_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = utils_time_is_expired &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Yield
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
</UL>

<P><STRONG><a name="[203]"></a>utils_time_spend</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, utils_timer.o(i.utils_time_spend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = utils_time_spend &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubInfoProc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[2b5]"></a>version_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, version.o(i.version_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360 + Unknown Stack Size
<LI>Call Chain = version_init &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_register_command
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_app_version
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_framework_init
</UL>

<P><STRONG><a name="[2c1]"></a>vfs_device_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, device.o(i.vfs_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = vfs_device_init &rArr; aos_register_driver &rArr; inode_reserve &rArr; inode_set_name &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[2c0]"></a>vfs_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, vfs.o(i.vfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = vfs_init &rArr; aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[3ca]"></a>workqueue_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, k_workqueue.o(i.workqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = workqueue_init &rArr; krhino_workqueue_create &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
</UL>

<P><STRONG><a name="[212]"></a>writeCString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqttpacket.o(i.writeCString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[20d]"></a>writeChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttpacket.o(i.writeChar))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[20f]"></a>writeInt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mqttpacket.o(i.writeInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[213]"></a>writeMQTTString</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mqttpacket.o(i.writeMQTTString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[11e]"></a>AT_ExecuteCommand</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, m0_wifi.o(i.AT_ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Delay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WIFI_Cmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_TCP_IsConnected
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_StopConn
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_StartClientConnection
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_SetTransMode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_SetOperationMode
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_SaveAndReset
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_IsConnected
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_GetOperationMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_GetModuleFwRevision
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_GetMACAddress
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_EnterCmdMode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_DNS_resolution
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_Connect
</UL>

<P><STRONG><a name="[1d6]"></a>Hex2Num</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, m0_wifi.o(i.Hex2Num))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_GetMACAddress
</UL>

<P><STRONG><a name="[1d3]"></a>ParseIP</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, m0_wifi.o(i.ParseIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ParseIP &rArr; ParseNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0_WIFI_DNS_resolution
</UL>

<P><STRONG><a name="[21e]"></a>ParseNumber</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m0_wifi.o(i.ParseNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseIP
</UL>

<P><STRONG><a name="[351]"></a>hal_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aos.o(i.hal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = hal_init &rArr; init_wifi &rArr; WIFI_Init &rArr; M0_WIFI_Init &rArr; M0_WIFI_SetTransMode &rArr; M0_WIFI_SaveAndReset &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[352]"></a>init_wifi</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, aos.o(i.init_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = init_wifi &rArr; WIFI_Init &rArr; M0_WIFI_Init &rArr; M0_WIFI_SetTransMode &rArr; M0_WIFI_SaveAndReset &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetModuleName
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetModuleFwRevision
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetMAC_Address
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[b6]"></a>sys_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, aos.o(i.sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2384 + Unknown Stack Size
<LI>Call Chain = sys_init &rArr; aos_kernel_init &rArr; application_start &rArr; netmgr_init &rArr; read_persistent_conf &rArr; aos_kv_get &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_start_hal
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos.o(i.sys_start)
</UL>
<P><STRONG><a name="[3e4]"></a>sys_start</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, aos.o(i.sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = sys_start &rArr; aos_init &rArr; krhino_init &rArr; dyn_mem_proc_task_start &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_start
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[520]"></a>var_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aos.o(i.var_init))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[154]"></a>Button_ISR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, soc_init.o(i.Button_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[220]"></a>RTC_Init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, soc_init.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTC_Init &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[225]"></a>SystemClock_Config</STRONG> (Thumb, 174 bytes, Stack size 232 bytes, soc_init.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[237]"></a>UART_Init</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, soc_init.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = UART_Init &rArr; aos_sem_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[163]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[164]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[150]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[151]"></a>FLASH_Program_Fast</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[138]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[149]"></a>FLASH_MassErase</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[14f]"></a>FLASH_OB_GetPCROP</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_OB_GetPCROP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_OB_GetPCROP
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
</UL>

<P><STRONG><a name="[14d]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_OB_GetRDP))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
</UL>

<P><STRONG><a name="[14e]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_OB_GetUser))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
</UL>

<P><STRONG><a name="[14c]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_OB_GetWRP))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
</UL>

<P><STRONG><a name="[132]"></a>FLASH_OB_PCROPConfig</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_OB_PCROPConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLASH_OB_PCROPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[134]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_OB_RDPConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_OB_RDPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[135]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_OB_UserConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[136]"></a>FLASH_OB_WRPConfig</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_OB_WRPConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_OB_WRPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[170]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[168]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 476 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[169]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[85]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[198]"></a>UART_EndRxTransfer</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = UART_EndRxTransfer &rArr; HAL_UART_RxCpltCallback &rArr; USART3_RxCpltCallback &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[19d]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; USART3_TxCpltCallback &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[197]"></a>UART_Receive_IT</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; USART3_RxCpltCallback &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[19c]"></a>UART_Transmit_IT</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[50f]"></a>soc_print_stack</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, soc_impl.o(i.soc_print_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = soc_print_stack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_get_cur_sp
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_err_proc
</UL>

<P><STRONG><a name="[353]"></a>hal_ota_get_crc16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ota_port.o(i.hal_ota_get_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344 + Unknown Stack Size
<LI>Call Chain = hal_ota_get_crc16 &rArr; aos_kv_get &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_init
</UL>

<P><STRONG><a name="[354]"></a>hal_ota_save_crc16</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ota_port.o(i.hal_ota_save_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352 + Unknown Stack Size
<LI>Call Chain = hal_ota_save_crc16 &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32l475_ota_set_boot
</UL>

<P><STRONG><a name="[3]"></a>stm32l475_ota_init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ota_port.o(i.stm32l475_ota_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368 + Unknown Stack Size
<LI>Call Chain = stm32l475_ota_init &rArr; hal_ota_get_crc16 &rArr; aos_kv_get &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_get_crc16
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_get_info
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_bank1_enabled
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_port.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>stm32l475_ota_read</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ota_port.o(i.stm32l475_ota_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = stm32l475_ota_read &rArr; hal_flash_read &rArr; FLASH_bank1_enabled &rArr; HAL_FLASHEx_OBGetConfig &rArr; FLASH_OB_GetPCROP
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_bank1_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_port.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>stm32l475_ota_set_boot</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ota_port.o(i.stm32l475_ota_set_boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376 + Unknown Stack Size
<LI>Call Chain = stm32l475_ota_set_boot &rArr; hal_ota_save_crc16 &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_save_crc16
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Final
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_switch_to_new_fw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_port.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>stm32l475_ota_write</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ota_port.o(i.stm32l475_ota_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240<LI>Call Chain = stm32l475_ota_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_bank1_enabled
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Update
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_port.o(.data)
</UL>
<P><STRONG><a name="[326]"></a>connet_wifi_ap</STRONG> (Thumb, 122 bytes, Stack size 120 bytes, wifi_port.o(i.connet_wifi_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = connet_wifi_ap &rArr; WIFI_Connect &rArr; M0_WIFI_Connect &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Disconnect
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Connect
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiStatusHandler
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_start
</UL>

<P><STRONG><a name="[b]"></a>get_ip_stat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_port.o(i.get_ip_stat))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>get_link_stat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_port.o(i.get_link_stat))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>power_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_port.o(i.power_off))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>power_on</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_port.o(i.power_on))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>register_monitor_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_port.o(i.register_monitor_cb))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>register_wlan_mgnt_monitor_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_port.o(i.register_wlan_mgnt_monitor_cb))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>set_channel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_port.o(i.set_channel))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>start_monitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_port.o(i.start_monitor))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>start_scan</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_port.o(i.start_scan))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>start_scan_adv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_port.o(i.start_scan_adv))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>stop_monitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_port.o(i.stop_monitor))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>suspend</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_port.o(i.suspend))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>suspend_soft_ap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_port.o(i.suspend_soft_ap))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>suspend_station</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_port.o(i.suspend_station))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>wifi_get_mac_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wifi_port.o(i.wifi_get_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wifi_get_mac_addr &rArr; WIFI_GetMAC_Address &rArr; M0_WIFI_GetMACAddress &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetMAC_Address
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>wifi_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wifi_port.o(i.wifi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>wifi_start</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wifi_port.o(i.wifi_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = wifi_start &rArr; connet_wifi_ap &rArr; WIFI_Connect &rArr; M0_WIFI_Connect &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connet_wifi_ap
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>wifi_start_adv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_port.o(i.wifi_start_adv))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>wlan_send_80211_raw_frame</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_port.o(i.wlan_send_80211_raw_frame))
<BR>[Address Reference Count : 1]<UL><LI> wifi_port.o(.data)
</UL>
<P><STRONG><a name="[28c]"></a>addsize</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, k_mm.o(i.addsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizetoindex
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_alloc
</UL>

<P><STRONG><a name="[30b]"></a>bitmap_search</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, k_mm.o(i.bitmap_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_find_first_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[344]"></a>find_last_bit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, k_mm.o(i.find_last_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = find_last_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_find_first_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findblk_byidx
</UL>

<P><STRONG><a name="[345]"></a>findblk_byidx</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, k_mm.o(i.findblk_byidx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = findblk_byidx &rArr; find_last_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[347]"></a>get_block</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, k_mm.o(i.get_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_block &rArr; krhino_bitmap_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_bitmap_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</UL>

<P><STRONG><a name="[3b2]"></a>init_mm_region</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, k_mm.o(i.init_mm_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_mm_region
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</UL>

<P><STRONG><a name="[384]"></a>insert_block</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, k_mm.o(i.insert_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = insert_block &rArr; krhino_bitmap_set
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_bitmap_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[3a7]"></a>k_mm_smallblk_alloc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, k_mm.o(i.k_mm_smallblk_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addsize
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[3a9]"></a>k_mm_smallblk_free</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, k_mm.o(i.k_mm_smallblk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removesize
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</UL>

<P><STRONG><a name="[348]"></a>krhino_bitmap_clear</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, k_mm.o(i.krhino_bitmap_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = krhino_bitmap_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block
</UL>

<P><STRONG><a name="[385]"></a>krhino_bitmap_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, k_mm.o(i.krhino_bitmap_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = krhino_bitmap_set
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_block
</UL>

<P><STRONG><a name="[30c]"></a>krhino_find_first_bit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, k_mm.o(i.krhino_find_first_bit))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizetoindex
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last_bit
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_search
</UL>

<P><STRONG><a name="[3aa]"></a>removesize</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_mm.o(i.removesize))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
</UL>

<P><STRONG><a name="[28d]"></a>sizetoindex</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, k_mm.o(i.sizetoindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_find_first_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addsize
</UL>

<P><STRONG><a name="[3bc]"></a>is_klist_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, k_mutex.o(i.is_klist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
</UL>

<P><STRONG><a name="[3bd]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_mutex.o(i.klist_rm))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
</UL>

<P><STRONG><a name="[3ba]"></a>mutex_release</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, k_mutex.o(i.mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
</UL>

<P><STRONG><a name="[4f4]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_pend.o(i.klist_insert))
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
</UL>

<P><STRONG><a name="[4f6]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_pend.o(i.klist_rm))
<BR><BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
</UL>

<P><STRONG><a name="[4f3]"></a>pend_list_add</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, k_pend.o(i.pend_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
</UL>

<P><STRONG><a name="[3c3]"></a>queue_create</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, k_queue.o(i.queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_create
</UL>

<P><STRONG><a name="[508]"></a>ringbuf_headlen_decompress</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, k_ringbuf.o(i.ringbuf_headlen_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ringbuf_headlen_decompress &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
</UL>

<P><STRONG><a name="[503]"></a>is_ready_list_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, k_sched.o(i.is_ready_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_update
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>

<P><STRONG><a name="[505]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_sched.o(i.klist_insert))
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>

<P><STRONG><a name="[506]"></a>krhino_find_first_bit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, k_sched.o(i.krhino_find_first_bit))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
</UL>

<P><STRONG><a name="[504]"></a>ready_list_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, k_sched.o(i.ready_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ready_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>

<P><STRONG><a name="[3c7]"></a>is_klist_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, k_sem.o(i.is_klist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>

<P><STRONG><a name="[3c8]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_sem.o(i.klist_rm))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
</UL>

<P><STRONG><a name="[3c6]"></a>sem_create</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, k_sem.o(i.sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sem_create
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
</UL>

<P><STRONG><a name="[3c9]"></a>sem_give</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, k_sem.o(i.sem_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give_all
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</UL>

<P><STRONG><a name="[3b1]"></a>klist_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_stats.o(i.klist_init))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kobj_list_init
</UL>

<P><STRONG><a name="[3d5]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_task.o(i.klist_insert))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[3d2]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_task.o(i.klist_rm))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>

<P><STRONG><a name="[3cd]"></a>task_create</STRONG> (Thumb, 372 bytes, Stack size 64 bytes, k_task.o(i.task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stack_init
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
</UL>

<P><STRONG><a name="[3cf]"></a>task_mutex_free</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, k_task.o(i.task_mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = task_mutex_free &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>

<P><STRONG><a name="[523]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_tick.o(i.klist_rm))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[522]"></a>tick_list_pri_insert</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, k_tick.o(i.tick_list_pri_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tick_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
</UL>

<P><STRONG><a name="[320]"></a>cmd_proc</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, k_timer.o(i.cmd_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = cmd_proc &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_rm
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_pri_insert
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd_proc
</UL>

<P><STRONG><a name="[3e0]"></a>klist_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_timer.o(i.klist_init))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
</UL>

<P><STRONG><a name="[525]"></a>timer_cb_proc</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, k_timer.o(i.timer_cb_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_cb_proc &rArr; timer_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_rm
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[526]"></a>timer_cmd_proc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, k_timer.o(i.timer_cmd_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = timer_cmd_proc &rArr; cmd_proc &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[321]"></a>timer_list_pri_insert</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, k_timer.o(i.timer_list_pri_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
</UL>

<P><STRONG><a name="[322]"></a>timer_list_rm</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_timer.o(i.timer_list_rm))
<BR><BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
</UL>

<P><STRONG><a name="[9f]"></a>timer_task</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, k_timer.o(i.timer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = timer_task &rArr; timer_cmd_proc &rArr; cmd_proc &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd_proc
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_timer.o(i.ktimer_init)
</UL>
<P><STRONG><a name="[3de]"></a>klist_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_workqueue.o(i.klist_init))
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[3df]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_workqueue.o(i.klist_insert))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[533]"></a>klist_rm_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, k_workqueue.o(i.klist_rm_init))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
</UL>

<P><STRONG><a name="[9e]"></a>worker_task</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, k_workqueue.o(i.worker_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = worker_task &rArr; krhino_sem_take &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm_init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_workqueue.o(i.krhino_workqueue_create)
</UL>
<P><STRONG><a name="[3dd]"></a>workqueue_is_exist</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, k_workqueue.o(i.workqueue_is_exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = workqueue_is_exist
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[a1]"></a>__item_find_cb</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, kvmgr.o(i.__item_find_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __item_find_cb &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kvmgr.o(i.kv_item_get)
</UL>
<P><STRONG><a name="[92]"></a>__item_gc_cb</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, kvmgr.o(i.__item_gc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264 + Unknown Stack Size
<LI>Call Chain = __item_gc_cb &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_write
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kvmgr.o(i.aos_kv_gc)
</UL>
<P><STRONG><a name="[96]"></a>__item_print_cb</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, kvmgr.o(i.__item_print_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __item_print_cb &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kvmgr.o(i.handle_kv_cmd)
</UL>
<P><STRONG><a name="[a0]"></a>__item_recovery_cb</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, kvmgr.o(i.__item_recovery_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 2304 + Unknown Stack Size
<LI>Call Chain = __item_recovery_cb &rArr; kv_item_del &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_crc8
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kvmgr.o(i.kv_init)
</UL>
<P><STRONG><a name="[1a]"></a>handle_kv_cmd</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, kvmgr.o(i.handle_kv_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2384 + Unknown Stack Size
<LI>Call Chain = handle_kv_cmd &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kvmgr.o(.data)
</UL>
<P><STRONG><a name="[2cb]"></a>kv_block_format</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, kvmgr.o(i.kv_block_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = kv_block_format &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_write
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_gc
</UL>

<P><STRONG><a name="[2d0]"></a>kv_init</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, kvmgr.o(i.kv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320 + Unknown Stack Size
<LI>Call Chain = kv_init &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_state_set
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_format
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_init
</UL>

<P><STRONG><a name="[3e2]"></a>kv_item_calc_pos</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, kvmgr.o(i.kv_item_calc_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = kv_item_calc_pos &rArr; trigger_gc &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_gc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
</UL>

<P><STRONG><a name="[25f]"></a>kv_item_del</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, kvmgr.o(i.kv_item_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288 + Unknown Stack Size
<LI>Call Chain = kv_item_del &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_state_set
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_update
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_recovery_cb
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
</UL>

<P><STRONG><a name="[2c9]"></a>kv_item_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kvmgr.o(i.kv_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = kv_item_free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
</UL>

<P><STRONG><a name="[2c8]"></a>kv_item_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, kvmgr.o(i.kv_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 2304 + Unknown Stack Size
<LI>Call Chain = kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
</UL>

<P><STRONG><a name="[2d5]"></a>kv_item_store</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, kvmgr.o(i.kv_item_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288 + Unknown Stack Size
<LI>Call Chain = kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_crc8
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_write
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_calc_pos
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_update
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
</UL>

<P><STRONG><a name="[2ca]"></a>kv_item_traverse</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, kvmgr.o(i.kv_item_traverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288 + Unknown Stack Size
<LI>Call Chain = kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_state_set
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_get
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_gc
</UL>

<P><STRONG><a name="[2d4]"></a>kv_item_update</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, kvmgr.o(i.kv_item_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 2312 + Unknown Stack Size
<LI>Call Chain = kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
</UL>

<P><STRONG><a name="[2cc]"></a>kv_state_set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, kvmgr.o(i.kv_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_gc
</UL>

<P><STRONG><a name="[3e1]"></a>raw_erase</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, kvmgr.o(i.raw_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = raw_erase &rArr; hal_flash_erase &rArr; FLASH_unlock_erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_format
</UL>

<P><STRONG><a name="[259]"></a>raw_read</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, kvmgr.o(i.raw_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = raw_read &rArr; hal_flash_read &rArr; FLASH_bank1_enabled &rArr; HAL_FLASHEx_OBGetConfig &rArr; FLASH_OB_GetPCROP
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_recovery_cb
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_print_cb
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_gc_cb
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_find_cb
</UL>

<P><STRONG><a name="[25b]"></a>raw_write</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, kvmgr.o(i.raw_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_state_set
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_format
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_gc_cb
</UL>

<P><STRONG><a name="[2d1]"></a>trigger_gc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, kvmgr.o(i.trigger_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = trigger_gc &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_calc_pos
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_init
</UL>

<P><STRONG><a name="[25e]"></a>utils_crc8</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, kvmgr.o(i.utils_crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = utils_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_recovery_cb
</UL>

<P><STRONG><a name="[272]"></a>__dlist_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, device.o(i.__dlist_add))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_add
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
</UL>

<P><STRONG><a name="[26f]"></a>_event_write</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, device.o(i._event_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = _event_write &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_del
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_add
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dlist_add
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_ioctl
</UL>

<P><STRONG><a name="[271]"></a>dlist_add</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, device.o(i.dlist_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dlist_add
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dlist_add
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
</UL>

<P><STRONG><a name="[270]"></a>dlist_del</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, device.o(i.dlist_del))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_close
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
</UL>

<P><STRONG><a name="[341]"></a>dlist_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, device.o(i.dlist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_close
</UL>

<P><STRONG><a name="[342]"></a>dlist_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device.o(i.dlist_init))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_open
</UL>

<P><STRONG><a name="[bb]"></a>event_close</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, device.o(i.event_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = event_close &rArr; aos_mutex_free &rArr; krhino_mutex_del &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_empty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_del
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>event_ioctl</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, device.o(i.event_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = event_ioctl &rArr; _event_write &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>event_open</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, device.o(i.event_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = event_open &rArr; aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>event_poll</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, device.o(i.event_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = event_poll &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>event_read</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, device.o(i.event_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = event_read &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_del
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_add
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>event_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, device.o(i.event_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = event_write &rArr; _event_write &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[2ef]"></a>deinit_parg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vfs.o(i.deinit_parg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = deinit_parg &rArr; aos_sem_free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
</UL>

<P><STRONG><a name="[2e9]"></a>del_file</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vfs.o(i.del_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = del_file
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_unref
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
</UL>

<P><STRONG><a name="[2ea]"></a>get_fd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vfs.o(i.get_fd))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
</UL>

<P><STRONG><a name="[2be]"></a>get_file</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, vfs.o(i.get_file))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_ioctl
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_poll
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_poll
</UL>

<P><STRONG><a name="[2eb]"></a>init_parg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vfs.o(i.init_parg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = init_parg &rArr; aos_sem_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
</UL>

<P><STRONG><a name="[2e8]"></a>new_file</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, vfs.o(i.new_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = new_file
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
</UL>

<P><STRONG><a name="[2ee]"></a>post_poll</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, vfs.o(i.post_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = post_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teardown_fd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
</UL>

<P><STRONG><a name="[2ec]"></a>pre_poll</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, vfs.o(i.pre_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pre_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_fd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
</UL>

<P><STRONG><a name="[4fd]"></a>setup_fd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vfs.o(i.setup_fd))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_poll
</UL>

<P><STRONG><a name="[4fc]"></a>teardown_fd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vfs.o(i.teardown_fd))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_poll
</UL>

<P><STRONG><a name="[2b3]"></a>trap_fcntl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vfs.o(i.trap_fcntl))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_fcntl
</UL>

<P><STRONG><a name="[2e7]"></a>trap_open</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vfs.o(i.trap_open))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
</UL>

<P><STRONG><a name="[2f4]"></a>trap_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vfs.o(i.trap_read))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
</UL>

<P><STRONG><a name="[b4]"></a>vfs_poll_notify</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vfs.o(i.vfs_poll_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vfs_poll_notify &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(i.pre_poll)
</UL>
<P><STRONG><a name="[2ed]"></a>wait_io</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vfs.o(i.wait_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = wait_io &rArr; aos_sem_wait &rArr; krhino_sem_take &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
</UL>

<P><STRONG><a name="[383]"></a>inode_set_name</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, vfs_inode.o(i.inode_set_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = inode_set_name &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
</UL>

<P><STRONG><a name="[91]"></a>event_read_cb</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, local_event.o(i.event_read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = event_read_cb &rArr; aos_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_events
</UL>
<BR>[Address Reference Count : 1]<UL><LI> local_event.o(i.aos_event_service_init)
</UL>
<P><STRONG><a name="[343]"></a>handle_events</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, local_event.o(i.handle_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = handle_events
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read_cb
</UL>

<P><STRONG><a name="[2f2]"></a>input_add_event</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, local_event.o(i.input_add_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = input_add_event &rArr; aos_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_event
</UL>

<P><STRONG><a name="[275]"></a>_get_context</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, yloop.o(i._get_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _get_context &rArr; aos_task_getspecific &rArr; krhino_cur_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_getspecific
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
</UL>

<P><STRONG><a name="[283]"></a>_set_context</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, yloop.o(i._set_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _set_context &rArr; aos_task_setspecific &rArr; krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
</UL>

<P><STRONG><a name="[2dc]"></a>dlist_del</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, yloop.o(i.dlist_del))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
</UL>

<P><STRONG><a name="[2da]"></a>dlist_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, yloop.o(i.dlist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
</UL>

<P><STRONG><a name="[2d9]"></a>get_context</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, yloop.o(i.get_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = get_context &rArr; _set_context &rArr; aos_task_setspecific &rArr; krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_context
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_context
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_set_eventfd
</UL>

<P><STRONG><a name="[1b]"></a>show_version</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, version.o(i.show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = show_version &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_kernel_version
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_app_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> version.o(.data)
</UL>
<P><STRONG><a name="[1f8]"></a>MQTTDisconnect</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mqtt_client.o(i.MQTTDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = MQTTDisconnect &rArr; iotx_mc_send_packet &rArr; iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_disconnect
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_connect
</UL>

<P><STRONG><a name="[1fa]"></a>MQTTKeepalive</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, mqtt_client.o(i.MQTTKeepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = MQTTKeepalive &rArr; iotx_mc_send_packet &rArr; iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
</UL>

<P><STRONG><a name="[1bf]"></a>MQTTPubInfoProc</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, mqtt_client.o(i.MQTTPubInfoProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = MQTTPubInfoProc &rArr; list_iterator_new &rArr; list_iterator_new_from_node &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_spend
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_destroy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_start
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRePublish
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Yield
</UL>

<P><STRONG><a name="[208]"></a>MQTTPuback</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, mqtt_client.o(i.MQTTPuback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MQTTPuback &rArr; iotx_mc_send_packet &rArr; iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
</UL>

<P><STRONG><a name="[204]"></a>MQTTRePublish</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mqtt_client.o(i.MQTTRePublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = MQTTRePublish &rArr; iotx_mc_send_packet &rArr; iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[1c0]"></a>MQTTSubInfoProc</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, mqtt_client.o(i.MQTTSubInfoProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = MQTTSubInfoProc &rArr; list_iterator_new &rArr; list_iterator_new_from_node &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_spend
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_destroy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Yield
</UL>

<P><STRONG><a name="[21b]"></a>MQTTSubscribe</STRONG> (Thumb, 266 bytes, Stack size 96 bytes, mqtt_client.o(i.MQTTSubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = MQTTSubscribe &rArr; iotx_mc_push_subInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_subInfo_to
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_subscribe
</UL>

<P><STRONG><a name="[21d]"></a>MQTTUnsubscribe</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, mqtt_client.o(i.MQTTUnsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = MQTTUnsubscribe &rArr; iotx_mc_push_subInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_subInfo_to
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_unsubscribe
</UL>

<P><STRONG><a name="[386]"></a>iotx_mc_attempt_reconnect</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, mqtt_client.o(i.iotx_mc_attempt_reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = iotx_mc_attempt_reconnect &rArr; iotx_mc_connect &rArr; iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
</UL>

<P><STRONG><a name="[387]"></a>iotx_mc_check_handle_is_identical</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mqtt_client.o(i.iotx_mc_check_handle_is_identical))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = iotx_mc_check_handle_is_identical &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_UNSUBACK
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
</UL>

<P><STRONG><a name="[388]"></a>iotx_mc_check_rule</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, mqtt_client.o(i.iotx_mc_check_rule))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = iotx_mc_check_rule &rArr; LITE_syslog &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
</UL>

<P><STRONG><a name="[389]"></a>iotx_mc_check_state_normal</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mqtt_client.o(i.iotx_mc_check_state_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = iotx_mc_check_state_normal &rArr; iotx_mc_get_client_state &rArr; HAL_MutexUnlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_unsubscribe
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_subscribe
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_publish
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_disconnect
</UL>

<P><STRONG><a name="[38a]"></a>iotx_mc_check_topic</STRONG> (Thumb, 200 bytes, Stack size 88 bytes, mqtt_client.o(i.iotx_mc_check_topic))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = iotx_mc_check_topic &rArr; iotx_mc_check_rule &rArr; LITE_syslog &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_rule
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_unsubscribe
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_subscribe
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_publish
</UL>

<P><STRONG><a name="[1b2]"></a>iotx_mc_connect</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, mqtt_client.o(i.iotx_mc_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = iotx_mc_connect &rArr; iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_attempt_reconnect
</UL>

<P><STRONG><a name="[1be]"></a>iotx_mc_cycle</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, mqtt_client.o(i.iotx_mc_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = iotx_mc_cycle &rArr; iotx_mc_handle_recv_SUBACK &rArr; iotx_mc_mask_subInfo_from &rArr; list_iterator_new &rArr; list_iterator_new_from_node &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_UNSUBACK
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBACK
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Yield
</UL>

<P><STRONG><a name="[3a1]"></a>iotx_mc_decode_packet</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, mqtt_client.o(i.iotx_mc_decode_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iotx_mc_decode_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
</UL>

<P><STRONG><a name="[392]"></a>iotx_mc_deliver_message</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, mqtt_client.o(i.iotx_mc_deliver_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = iotx_mc_deliver_message &rArr; HAL_MutexUnlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_is_topic_matched
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
</UL>

<P><STRONG><a name="[394]"></a>iotx_mc_disconnect</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mqtt_client.o(i.iotx_mc_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = iotx_mc_disconnect &rArr; MQTTDisconnect &rArr; iotx_mc_send_packet &rArr; iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_state_normal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_release
</UL>

<P><STRONG><a name="[39e]"></a>iotx_mc_disconnect_callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqtt_client.o(i.iotx_mc_disconnect_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iotx_mc_disconnect_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
</UL>

<P><STRONG><a name="[202]"></a>iotx_mc_get_client_state</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mqtt_client.o(i.iotx_mc_get_client_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = iotx_mc_get_client_state &rArr; HAL_MutexUnlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_unsubscribe
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_subscribe
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_publish
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_state_normal
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubInfoProc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[395]"></a>iotx_mc_get_next_packetid</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mqtt_client.o(i.iotx_mc_get_next_packetid))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = iotx_mc_get_next_packetid &rArr; HAL_MutexUnlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_unsubscribe
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_subscribe
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_publish
</UL>

<P><STRONG><a name="[396]"></a>iotx_mc_handle_reconnect</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, mqtt_client.o(i.iotx_mc_handle_reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 3160 + Unknown Stack Size
<LI>Call Chain = iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_attempt_reconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
</UL>

<P><STRONG><a name="[397]"></a>iotx_mc_handle_recv_CONNACK</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mqtt_client.o(i.iotx_mc_handle_recv_CONNACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = iotx_mc_handle_recv_CONNACK &rArr; MQTTDeserialize_connack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
</UL>

<P><STRONG><a name="[38e]"></a>iotx_mc_handle_recv_PUBACK</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, mqtt_client.o(i.iotx_mc_handle_recv_PUBACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = iotx_mc_handle_recv_PUBACK &rArr; iotx_mc_mask_pubInfo_from &rArr; list_iterator_new &rArr; list_iterator_new_from_node &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_pubInfo_from
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[390]"></a>iotx_mc_handle_recv_PUBLISH</STRONG> (Thumb, 308 bytes, Stack size 72 bytes, mqtt_client.o(i.iotx_mc_handle_recv_PUBLISH))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = iotx_mc_handle_recv_PUBLISH &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_malloc_internal
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_internal
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[38f]"></a>iotx_mc_handle_recv_SUBACK</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, mqtt_client.o(i.iotx_mc_handle_recv_SUBACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = iotx_mc_handle_recv_SUBACK &rArr; iotx_mc_mask_subInfo_from &rArr; list_iterator_new &rArr; list_iterator_new_from_node &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_subInfo_from
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_handle_is_identical
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[391]"></a>iotx_mc_handle_recv_UNSUBACK</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, mqtt_client.o(i.iotx_mc_handle_recv_UNSUBACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = iotx_mc_handle_recv_UNSUBACK &rArr; iotx_mc_mask_subInfo_from &rArr; list_iterator_new &rArr; list_iterator_new_from_node &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_unsuback
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_mask_subInfo_from
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_handle_is_identical
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[1b0]"></a>iotx_mc_init</STRONG> (Thumb, 540 bytes, Stack size 120 bytes, mqtt_client.o(i.iotx_mc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = iotx_mc_init &rArr; list_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_new
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_malloc_internal
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_internal
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_connect_params
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[393]"></a>iotx_mc_is_topic_matched</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, mqtt_client.o(i.iotx_mc_is_topic_matched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iotx_mc_is_topic_matched
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
</UL>

<P><STRONG><a name="[1c1]"></a>iotx_mc_keepalive</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, mqtt_client.o(i.iotx_mc_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 3184 + Unknown Stack Size
<LI>Call Chain = iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_reconnect_callback
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_disconnect_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Yield
</UL>

<P><STRONG><a name="[39c]"></a>iotx_mc_keepalive_sub</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, mqtt_client.o(i.iotx_mc_keepalive_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = iotx_mc_keepalive_sub &rArr; MQTTKeepalive &rArr; iotx_mc_send_packet &rArr; iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_state_normal
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
</UL>

<P><STRONG><a name="[398]"></a>iotx_mc_mask_pubInfo_from</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, mqtt_client.o(i.iotx_mc_mask_pubInfo_from))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = iotx_mc_mask_pubInfo_from &rArr; list_iterator_new &rArr; list_iterator_new_from_node &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_destroy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBACK
</UL>

<P><STRONG><a name="[399]"></a>iotx_mc_mask_subInfo_from</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, mqtt_client.o(i.iotx_mc_mask_subInfo_from))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = iotx_mc_mask_subInfo_from &rArr; list_iterator_new &rArr; list_iterator_new_from_node &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_destroy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_UNSUBACK
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
</UL>

<P><STRONG><a name="[1b6]"></a>iotx_mc_publish</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, mqtt_client.o(i.iotx_mc_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = iotx_mc_publish &rArr; MQTTPublish &rArr; iotx_mc_push_pubInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_next_packetid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_state_normal
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish
</UL>

<P><STRONG><a name="[20c]"></a>iotx_mc_push_pubInfo_to</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, mqtt_client.o(i.iotx_mc_push_pubInfo_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = iotx_mc_push_pubInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_rpush
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_node_new
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_start
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_malloc_internal
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>

<P><STRONG><a name="[21c]"></a>iotx_mc_push_subInfo_to</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, mqtt_client.o(i.iotx_mc_push_subInfo_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = iotx_mc_push_subInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_rpush
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_node_new
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_start
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_malloc_internal
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
</UL>

<P><STRONG><a name="[38d]"></a>iotx_mc_read_packet</STRONG> (Thumb, 512 bytes, Stack size 56 bytes, mqtt_client.o(i.iotx_mc_read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = iotx_mc_read_packet &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_malloc_internal
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_internal
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_decode_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[39d]"></a>iotx_mc_reconnect_callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqtt_client.o(i.iotx_mc_reconnect_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iotx_mc_reconnect_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
</UL>

<P><STRONG><a name="[1b3]"></a>iotx_mc_release</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, mqtt_client.o(i.iotx_mc_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = iotx_mc_release &rArr; iotx_mc_disconnect &rArr; MQTTDisconnect &rArr; iotx_mc_send_packet &rArr; iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_destroy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_internal
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Destroy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[1ee]"></a>iotx_mc_send_packet</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, mqtt_client.o(i.iotx_mc_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = iotx_mc_send_packet &rArr; iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTRePublish
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[206]"></a>iotx_mc_set_client_state</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mqtt_client.o(i.iotx_mc_set_client_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = iotx_mc_set_client_state &rArr; HAL_MutexUnlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_unsubscribe
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_subscribe
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_release
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_publish
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_disconnect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_connect
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[39b]"></a>iotx_mc_set_connect_params</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, mqtt_client.o(i.iotx_mc_set_connect_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = iotx_mc_set_connect_params &rArr; LITE_syslog &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
</UL>

<P><STRONG><a name="[1b8]"></a>iotx_mc_subscribe</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, mqtt_client.o(i.iotx_mc_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = iotx_mc_subscribe &rArr; MQTTSubscribe &rArr; iotx_mc_push_subInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_next_packetid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_state_normal
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Subscribe
</UL>

<P><STRONG><a name="[1ba]"></a>iotx_mc_unsubscribe</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, mqtt_client.o(i.iotx_mc_unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = iotx_mc_unsubscribe &rArr; MQTTUnsubscribe &rArr; iotx_mc_push_subInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_next_packetid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_state_normal
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Unsubscribe
</UL>

<P><STRONG><a name="[38c]"></a>iotx_mc_wait_CONNACK</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, mqtt_client.o(i.iotx_mc_wait_CONNACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_CONNACK
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_connect
</UL>

<P><STRONG><a name="[37e]"></a>init_device_parmas</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ota_service.o(i.init_device_parmas))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_device_parmas
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_app_version
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_get_id
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_service_event
</UL>

<P><STRONG><a name="[b8]"></a>ota_hal_finish_cb</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ota_service.o(i.ota_hal_finish_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ota_hal_finish_cb &rArr; hal_ota_set_boot
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_set_boot
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_get_default_module
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_service.o(i.update_action)
</UL>
<P><STRONG><a name="[b9]"></a>ota_hal_write_cb</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ota_service.o(i.ota_hal_write_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ota_hal_write_cb &rArr; hal_ota_write
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_write
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ota_get_default_module
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_service.o(i.update_action)
</UL>
<P><STRONG><a name="[528]"></a>ota_set_callbacks</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ota_service.o(i.ota_set_callbacks))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_action
</UL>

<P><STRONG><a name="[332]"></a>update_action</STRONG> (Thumb, 104 bytes, Stack size 1272 bytes, ota_service.o(i.update_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808 + Unknown Stack Size
<LI>Call Chain = update_action &rArr; ota_do_update_packet &rArr; ota_status_post &rArr; platform_ota_status_post &rArr; IOT_MQTT_Yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_parse_response
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_do_update_packet
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_set_callbacks
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_update
</UL>

<P><STRONG><a name="[346]"></a>free_msg_temp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ota_update_manifest.o(i.free_msg_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = free_msg_temp &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
</UL>

<P><STRONG><a name="[4d1]"></a>get_download_url</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ota_update_manifest.o(i.get_download_url))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_download_start
</UL>

<P><STRONG><a name="[4b9]"></a>ota_if_cancel</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ota_update_manifest.o(i.ota_if_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ota_if_cancel &rArr; ota_is_cancelable &rArr; ota_get_status &rArr; ota_mutex_unlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_is_cancelable
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_get_id
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_cancel_update_packet
</UL>

<P><STRONG><a name="[4dd]"></a>ota_is_cancelable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ota_update_manifest.o(i.ota_is_cancelable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ota_is_cancelable &rArr; ota_get_status &rArr; ota_mutex_unlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_if_cancel
</UL>

<P><STRONG><a name="[4c0]"></a>set_download_url</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ota_update_manifest.o(i.set_download_url))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = set_download_url &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_do_update_packet
</UL>

<P><STRONG><a name="[b3]"></a>aliot_mqtt_ota_callback</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ota_transport.o(i.aliot_mqtt_ota_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = aliot_mqtt_ota_callback &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_transport.o(i.platform_ota_subscribe_upgrade)
</UL>
<P><STRONG><a name="[4fb]"></a>ota_check_progress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ota_transport.o(i.ota_check_progress))
<BR><BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_status_post
</UL>

<P><STRONG><a name="[4d4]"></a>ota_gen_info_msg</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ota_transport.o(i.ota_gen_info_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ota_gen_info_msg &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_result_post
</UL>

<P><STRONG><a name="[4d5]"></a>ota_gen_report_msg</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, ota_transport.o(i.ota_gen_report_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ota_gen_report_msg &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_status_post
</UL>

<P><STRONG><a name="[4e0]"></a>ota_mqtt_gen_topic_name</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ota_transport.o(i.ota_mqtt_gen_topic_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ota_mqtt_gen_topic_name &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mqtt_publish
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_subscribe_upgrade
</UL>

<P><STRONG><a name="[4e1]"></a>ota_mqtt_publish</STRONG> (Thumb, 210 bytes, Stack size 112 bytes, ota_transport.o(i.ota_mqtt_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = ota_mqtt_publish &rArr; IOT_MQTT_Publish &rArr; iotx_mc_publish &rArr; MQTTPublish &rArr; iotx_mc_push_pubInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_mqtt_gen_topic_name
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_status_post
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_result_post
</UL>

<P><STRONG><a name="[4fa]"></a>to_capital_letter</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ota_transport.o(i.to_capital_letter))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_ota_parse_response
</UL>

<P><STRONG><a name="[4b1]"></a>add_autoconfig_plugin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netmgr.o(i.add_autoconfig_plugin))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_init
</UL>

<P><STRONG><a name="[318]"></a>clear_wifi_ssid</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, netmgr.o(i.clear_wifi_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328 + Unknown Stack Size
<LI>Call Chain = clear_wifi_ssid &rArr; aos_kv_del &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_clear_ap_config
</UL>

<P><STRONG><a name="[1f]"></a>def_smart_config_result_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netmgr.o(i.def_smart_config_result_cb))
<BR>[Address Reference Count : 1]<UL><LI> netmgr.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>def_smart_config_start</STRONG> (Thumb, 48 bytes, Stack size 144 bytes, netmgr.o(i.def_smart_config_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 2504 + Unknown Stack Size
<LI>Call Chain = def_smart_config_start &rArr; netmgr_set_ap_config &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_event
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_set_ap_config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netmgr.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>def_smart_config_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, netmgr.o(i.def_smart_config_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = def_smart_config_stop &rArr; aos_post_event &rArr; input_add_event &rArr; aos_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netmgr.o(.data)
</UL>
<P><STRONG><a name="[349]"></a>get_bssid</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, netmgr.o(i.get_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_bssid
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_scan_completed_event
</UL>

<P><STRONG><a name="[34b]"></a>get_wifi_ssid</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, netmgr.o(i.get_wifi_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_wifi_ssid &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_persistent_conf
</UL>

<P><STRONG><a name="[1c]"></a>handle_netmgr_cmd</STRONG> (Thumb, 120 bytes, Stack size 160 bytes, netmgr.o(i.handle_netmgr_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520 + Unknown Stack Size
<LI>Call Chain = handle_netmgr_cmd &rArr; netmgr_set_ap_config &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_start
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_set_ap_config
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_clear_ap_config
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netmgr.o(.data)
</UL>
<P><STRONG><a name="[362]"></a>handle_wifi_disconnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, netmgr.o(i.handle_wifi_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = handle_wifi_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mesh
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_events_executor
</UL>

<P><STRONG><a name="[364]"></a>has_valid_ap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, netmgr.o(i.has_valid_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = has_valid_ap
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_start
</UL>

<P><STRONG><a name="[c0]"></a>netmgr_connect_fail_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netmgr.o(i.netmgr_connect_fail_event))
<BR>[Address Reference Count : 1]<UL><LI> netmgr.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>netmgr_events_executor</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, netmgr.o(i.netmgr_events_executor))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368 + Unknown Stack Size
<LI>Call Chain = netmgr_events_executor &rArr; set_wifi_ssid &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_event
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_ssid
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconnect_wifi
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifi_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netmgr.o(i.netmgr_init)
</UL>
<P><STRONG><a name="[c6]"></a>netmgr_fatal_err_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netmgr.o(i.netmgr_fatal_err_event))
<BR>[Address Reference Count : 1]<UL><LI> netmgr.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>netmgr_ip_got_event</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, netmgr.o(i.netmgr_ip_got_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = netmgr_ip_got_event &rArr; translate_addr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_event
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_addr
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_mesh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netmgr.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>netmgr_para_chg_event</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, netmgr.o(i.netmgr_para_chg_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netmgr_para_chg_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netmgr.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>netmgr_scan_adv_completed_event</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, netmgr.o(i.netmgr_scan_adv_completed_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netmgr_scan_adv_completed_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netmgr.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>netmgr_scan_completed_event</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, netmgr.o(i.netmgr_scan_completed_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = netmgr_scan_completed_event &rArr; get_bssid
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bssid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netmgr.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>netmgr_stat_chg_event</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, netmgr.o(i.netmgr_stat_chg_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = netmgr_stat_chg_event &rArr; aos_post_event &rArr; input_add_event &rArr; aos_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netmgr.o(.constdata)
</UL>
<P><STRONG><a name="[4b7]"></a>netmgr_wifi_config_start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, netmgr.o(i.netmgr_wifi_config_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = netmgr_wifi_config_start &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_mesh
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_start
</UL>

<P><STRONG><a name="[4b3]"></a>read_persistent_conf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, netmgr.o(i.read_persistent_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344 + Unknown Stack Size
<LI>Call Chain = read_persistent_conf &rArr; aos_kv_get &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wifi_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_init
</UL>

<P><STRONG><a name="[4b0]"></a>reconnect_wifi</STRONG> (Thumb, 80 bytes, Stack size 224 bytes, netmgr.o(i.reconnect_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = reconnect_wifi &rArr; set_access_security &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_start
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_get_default_module
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_access_security
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_events_executor
</UL>

<P><STRONG><a name="[507]"></a>set_access_security</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, netmgr.o(i.set_access_security))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_access_security &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconnect_wifi
</UL>

<P><STRONG><a name="[4af]"></a>set_wifi_ssid</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, netmgr.o(i.set_wifi_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352 + Unknown Stack Size
<LI>Call Chain = set_wifi_ssid &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; raw_write &rArr; hal_flash_write &rArr; FLASH_update &rArr; FLASH_write_at &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_events_executor
</UL>

<P><STRONG><a name="[4b5]"></a>start_mesh</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netmgr.o(i.start_mesh))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_start
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_wifi_config_start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_ip_got_event
</UL>

<P><STRONG><a name="[363]"></a>stop_mesh</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netmgr.o(i.stop_mesh))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_start
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_wifi_disconnect
</UL>

<P><STRONG><a name="[4b4]"></a>translate_addr</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, netmgr.o(i.translate_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = translate_addr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_ip_got_event
</UL>

<P><STRONG><a name="[4b6]"></a>valid_access_security</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, netmgr.o(i.valid_access_security))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = valid_access_security &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netmgr_set_ap_config
</UL>

<P><STRONG><a name="[90]"></a>cli_main</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, cli.o(i.cli_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = cli_main &rArr; get_input &rArr; cli_getchar &rArr; hal_uart_recv &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bad_command
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(i.aos_cli_init)
</UL>
<P><STRONG><a name="[cc]"></a>devname_cmd</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, cli.o(i.devname_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = devname_cmd &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>dumpsys_cmd</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, cli.o(i.dumpsys_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = dumpsys_cmd &rArr; dumpsys_func &rArr; dump_task_stack_byname &rArr; dump_task_stack &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>echo_cmd</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, cli.o(i.echo_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = echo_cmd &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>exit_cmd</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, cli.o(i.exit_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = exit_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[31b]"></a>get_input</STRONG> (Thumb, 760 bytes, Stack size 32 bytes, cli.o(i.get_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = get_input &rArr; cli_getchar &rArr; hal_uart_recv &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getchar
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
</UL>

<P><STRONG><a name="[31c]"></a>handle_input</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, cli.o(i.handle_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = handle_input &rArr; cli_putstr &rArr; hal_uart_send &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_putstr
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_command
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
</UL>

<P><STRONG><a name="[c7]"></a>help_cmd</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, cli.o(i.help_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = help_cmd &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[366]"></a>hex</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, cli.o(i.hex))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
</UL>

<P><STRONG><a name="[365]"></a>hexstr2bin</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cli.o(i.hexstr2bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hexstr2bin
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_cmd
</UL>

<P><STRONG><a name="[d2]"></a>log_cmd</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, cli.o(i.log_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = log_cmd &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_set_log_level
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[360]"></a>lookup_command</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, cli.o(i.lookup_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lookup_command &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[d3]"></a>mac_cmd</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, cli.o(i.mac_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mac_cmd &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_set_mac_addr
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_get_mac_addr
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>ota_cmd</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, cli.o(i.ota_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ota_cmd &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[31d]"></a>print_bad_command</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cli.o(i.print_bad_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = print_bad_command &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
</UL>

<P><STRONG><a name="[ce]"></a>reboot_cmd</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, cli.o(i.reboot_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = reboot_cmd &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reboot
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[34a]"></a>tab_complete</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, cli.o(i.tab_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tab_complete &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
</UL>

<P><STRONG><a name="[cb]"></a>task_cmd</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, cli.o(i.task_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = task_cmd &rArr; dumpsys_task_func &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_task_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>uptime_cmd</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, cli.o(i.uptime_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uptime_cmd &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>version_cmd</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, cli.o(i.version_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = version_cmd &rArr; csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_version_get
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_get_tag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>wifi_debug_cmd</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, cli.o(i.wifi_debug_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_debug_cmd &rArr; hal_wifi_start_debug_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wifi_start_debug_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[33d]"></a>dumpsys_info_func</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dumpsys.o(i.dumpsys_info_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dumpsys_info_func &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_func
</UL>

<P><STRONG><a name="[1e8]"></a>Decode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, md5.o(i.Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[1ea]"></a>Encode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, md5.o(i.Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Final
</UL>

<P><STRONG><a name="[1e7]"></a>MD5Transform</STRONG> (Thumb, 1898 bytes, Stack size 96 bytes, md5.o(i.MD5Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Update
</UL>

<P><STRONG><a name="[310]"></a>cJSON_New_Item</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cjson.o(i.cJSON_New_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = cJSON_New_Item &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[30f]"></a>cJSON_strcasecmp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cjson.o(i.cJSON_strcasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[4ee]"></a>parse_array</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, cjson.o(i.parse_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[4f0]"></a>parse_object</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, cjson.o(i.parse_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[4f1]"></a>parse_string</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, cjson.o(i.parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = parse_string &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[313]"></a>parse_value</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, cjson.o(i.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = parse_value &rArr; parse_number &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[312]"></a>skip</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cjson.o(i.skip))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[266]"></a>_authenticate_http_url</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, guider.o(i._authenticate_http_url))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _authenticate_http_url &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
</UL>

<P><STRONG><a name="[268]"></a>_authenticate_string</STRONG> (Thumb, 138 bytes, Stack size 1064 bytes, guider.o(i._authenticate_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = _authenticate_string &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_device_info_get
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
</UL>

<P><STRONG><a name="[26d]"></a>_calc_hmac_signature</STRONG> (Thumb, 254 bytes, Stack size 624 bytes, guider.o(i._calc_hmac_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052<LI>Call Chain = _calc_hmac_signature &rArr; utils_hmac_sha1 &rArr; utils_sha1_finish &rArr; utils_sha1_update &rArr; utils_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha1
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_device_info_get
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
</UL>

<P><STRONG><a name="[273]"></a>_fill_conn_string</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, guider.o(i._fill_conn_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _fill_conn_string &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
</UL>

<P><STRONG><a name="[277]"></a>_http_response</STRONG> (Thumb, 372 bytes, Stack size 136 bytes, guider.o(i._http_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_malloc_internal
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_internal
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotId_iotToken_http
</UL>

<P><STRONG><a name="[279]"></a>_ident_partner</STRONG> (Thumb, 62 bytes, Stack size 80 bytes, guider.o(i._ident_partner))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _ident_partner &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetPartnerID
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
</UL>

<P><STRONG><a name="[27b]"></a>_iotId_iotToken_http</STRONG> (Thumb, 646 bytes, Stack size 584 bytes, guider.o(i._iotId_iotToken_http))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + Unknown Stack Size
<LI>Call Chain = _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_free_internal
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_http_response
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_conn_info_get
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_ca_get
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
</UL>

<P><STRONG><a name="[282]"></a>_secure_mode_num</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guider.o(i._secure_mode_num))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_secure_mode_str
</UL>

<P><STRONG><a name="[281]"></a>_secure_mode_str</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, guider.o(i._secure_mode_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _secure_mode_str &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_secure_mode_num
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
</UL>

<P><STRONG><a name="[28b]"></a>_timestamp_string</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, guider.o(i._timestamp_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _timestamp_string &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_guider_authenticate
</UL>

<P><STRONG><a name="[26b]"></a>_avRandom</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_tls_mbedtls.o(i._avRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _avRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ssl_random
</UL>

<P><STRONG><a name="[236]"></a>_real_confirm</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_tls_mbedtls.o(i._real_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _real_confirm &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[228]"></a>_ssl_client_init</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, hal_tls_mbedtls.o(i._ssl_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2852 + Unknown Stack Size
<LI>Call Chain = _ssl_client_init &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_crypt_cbc_alt &rArr; ali_aes_init &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[88]"></a>_ssl_debug</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, hal_tls_mbedtls.o(i._ssl_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ssl_debug &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_tls_mbedtls.o(i.TLSConnectNetwork)
</UL>
<P><STRONG><a name="[87]"></a>_ssl_random</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hal_tls_mbedtls.o(i._ssl_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ssl_random &rArr; _avRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_avRandom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_tls_mbedtls.o(i.TLSConnectNetwork)
</UL>
<P><STRONG><a name="[368]"></a>httpclient_base64enc</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, utils_httpc.o(i.httpclient_base64enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_auth
</UL>

<P><STRONG><a name="[370]"></a>httpclient_conn</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, utils_httpc.o(i.httpclient_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = httpclient_conn &rArr; LITE_syslog &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_connect
</UL>

<P><STRONG><a name="[369]"></a>httpclient_parse_host</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, utils_httpc.o(i.httpclient_parse_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = httpclient_parse_host &rArr; LITE_syslog &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[372]"></a>httpclient_parse_url</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, utils_httpc.o(i.httpclient_parse_url))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = httpclient_parse_url &rArr; LITE_syslog &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
</UL>

<P><STRONG><a name="[373]"></a>httpclient_recv</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, utils_httpc.o(i.httpclient_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = httpclient_recv &rArr; iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
</UL>

<P><STRONG><a name="[376]"></a>httpclient_response_parse</STRONG> (Thumb, 526 bytes, Stack size 136 bytes, utils_httpc.o(i.httpclient_response_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
</UL>

<P><STRONG><a name="[374]"></a>httpclient_retrieve_content</STRONG> (Thumb, 948 bytes, Stack size 80 bytes, utils_httpc.o(i.httpclient_retrieve_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
</UL>

<P><STRONG><a name="[324]"></a>connect_ssl</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, utils_net.o(i.connect_ssl))
<BR><BR>[Stack]<UL><LI>Max Depth = 3012 + Unknown Stack Size
<LI>Call Chain = connect_ssl &rArr; HAL_SSL_Establish &rArr; TLSConnectNetwork &rArr; _ssl_client_init &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_crypt_cbc_alt &rArr; ali_aes_init &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Establish
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_connect
</UL>

<P><STRONG><a name="[325]"></a>connect_tcp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, utils_net.o(i.connect_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = connect_tcp &rArr; HAL_TCP_Establish &rArr; WIFI_OpenClientConnection &rArr; M0_WIFI_StartClientConnection &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Establish
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_connect
</UL>

<P><STRONG><a name="[330]"></a>disconnect_ssl</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, utils_net.o(i.disconnect_ssl))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = disconnect_ssl &rArr; HAL_SSL_Destroy &rArr; utils_network_ssl_disconnect &rArr; mbedtls_net_free &rArr; WIFI_CloseClientConnection &rArr; M0_WIFI_StopConn &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_disconnect
</UL>

<P><STRONG><a name="[331]"></a>disconnect_tcp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, utils_net.o(i.disconnect_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = disconnect_tcp &rArr; HAL_TCP_Destroy &rArr; WIFI_CloseClientConnection &rArr; M0_WIFI_StopConn &rArr; AT_ExecuteCommand &rArr; UART_WIFI_Cmd &rArr; UART_WIFI_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_disconnect
</UL>

<P><STRONG><a name="[4ff]"></a>read_ssl</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, utils_net.o(i.read_ssl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = read_ssl &rArr; HAL_SSL_Read &rArr; utils_network_ssl_read &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_net_read
</UL>

<P><STRONG><a name="[52f]"></a>write_ssl</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, utils_net.o(i.write_ssl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = write_ssl &rArr; HAL_SSL_Write &rArr; utils_network_ssl_write &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_syslog
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SSL_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_net_write
</UL>

<P><STRONG><a name="[52e]"></a>write_tcp</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, utils_net.o(i.write_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = write_tcp &rArr; HAL_TCP_Write &rArr; WIFI_SendData &rArr; M0_WIFI_SendData &rArr; UART_WIFI_SendData &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TCP_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_net_write
</UL>

<P><STRONG><a name="[ac]"></a>_demo_message_arrive</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, mqtt-example-b_l475e.o(i._demo_message_arrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _demo_message_arrive &rArr; IOT_MQTT_Publish &rArr; iotx_mc_publish &rArr; MQTTPublish &rArr; iotx_mc_push_pubInfo_to &rArr; list_node_new &rArr; LITE_malloc_internal &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt-example-b_l475e.o(i.mqtt_client_example)
</UL>
<P><STRONG><a name="[4ac]"></a>ota_init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mqtt-example-b_l475e.o(i.ota_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3584 + Unknown Stack Size
<LI>Call Chain = ota_init &rArr; ota_service_event &rArr; ota_regist_upgrade &rArr; ota_post_version_msg &rArr; ota_status_post &rArr; platform_ota_status_post &rArr; IOT_MQTT_Yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_service_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
</UL>

<P><STRONG><a name="[93]"></a>wifi_service_event</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mqtt-example-b_l475e.o(i.wifi_service_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 4296 + Unknown Stack Size
<LI>Call Chain = wifi_service_event &rArr; mqtt_client_example &rArr; ota_init &rArr; ota_service_event &rArr; ota_regist_upgrade &rArr; ota_post_version_msg &rArr; ota_status_post &rArr; platform_ota_status_post &rArr; IOT_MQTT_Yield &rArr; iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; iotx_guider_authenticate &rArr; _iotId_iotToken_http &rArr; _http_response &rArr; httpclient_common &rArr; httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_client_example
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt-example-b_l475e.o(i.application_start)
</UL>
<P><STRONG><a name="[511]"></a>mbedtls_cipher_get_cipher_mode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_cipher_get_cipher_mode))
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[466]"></a>mbedtls_ssl_hdr_len</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_hdr_len))
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>

<P><STRONG><a name="[484]"></a>mbedtls_ssl_hs_hdr_len</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_ssl_hs_hdr_len))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[487]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_tls.o(i.mbedtls_ssl_safer_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[45b]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[510]"></a>ssl_bitmask_set</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_bitmask_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_bitmask_set
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reassemble_dtls_handshake
</UL>

<P><STRONG><a name="[a9]"></a>ssl_calc_finished_tls_sha256</STRONG> (Thumb, 98 bytes, Stack size 176 bytes, ssl_tls.o(i.ssl_calc_finished_tls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = ssl_calc_finished_tls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[a8]"></a>ssl_calc_verify_tls_sha256</STRONG> (Thumb, 42 bytes, Stack size 120 bytes, ssl_tls.o(i.ssl_calc_verify_tls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = ssl_calc_verify_tls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[463]"></a>ssl_check_timer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_check_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_check_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
</UL>

<P><STRONG><a name="[48d]"></a>ssl_decrypt_buf</STRONG> (Thumb, 598 bytes, Stack size 88 bytes, ssl_tls.o(i.ssl_decrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ssl_decrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_process
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_ep_len
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[499]"></a>ssl_encrypt_buf</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, ssl_tls.o(i.ssl_encrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ssl_encrypt_buf &rArr; mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[467]"></a>ssl_ep_len</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_ep_len))
<BR><BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[497]"></a>ssl_flight_append</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_flight_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[481]"></a>ssl_flight_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_flight_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ssl_flight_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[493]"></a>ssl_handshake_init</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_handshake_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ssl_handshake_init &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
</UL>

<P><STRONG><a name="[482]"></a>ssl_handshake_wrapup_free_hs_transform</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ssl_tls.o(i.ssl_handshake_wrapup_free_hs_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_ssl_handshake_free &rArr; ssl_flight_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
</UL>

<P><STRONG><a name="[460]"></a>ssl_load_six_bytes</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_load_six_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_load_six_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_update
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_check
</UL>

<P><STRONG><a name="[48c]"></a>ssl_parse_record_header</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, ssl_tls.o(i.ssl_parse_record_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_check
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record_layer
</UL>

<P><STRONG><a name="[488]"></a>ssl_reassemble_dtls_handshake</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, ssl_tls.o(i.ssl_reassemble_dtls_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ssl_reassemble_dtls_handshake &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_bitmask_set
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
</UL>

<P><STRONG><a name="[464]"></a>ssl_set_timer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssl_tls.o(i.ssl_set_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_flight_completed
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[48e]"></a>ssl_swap_epochs</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, ssl_tls.o(i.ssl_swap_epochs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssl_swap_epochs
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_resend
</UL>

<P><STRONG><a name="[aa]"></a>ssl_update_checksum_sha256</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_update_checksum_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = ssl_update_checksum_sha256 &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_optimize_checksum)
</UL>
<P><STRONG><a name="[b5]"></a>ssl_update_checksum_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(i.ssl_update_checksum_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = ssl_update_checksum_start &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.ssl_handshake_init)
</UL>
<P><STRONG><a name="[527]"></a>tls_prf_generic</STRONG> (Thumb, 274 bytes, Stack size 224 bytes, ssl_tls.o(i.tls_prf_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
</UL>

<P><STRONG><a name="[a7]"></a>tls_prf_sha256</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, ssl_tls.o(i.tls_prf_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(i.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[22]"></a>threading_mutex_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, threading.o(i.threading_mutex_dummy))
<BR>[Address Reference Count : 1]<UL><LI> threading.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>threading_mutex_fail</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, threading.o(i.threading_mutex_fail))
<BR>[Address Reference Count : 1]<UL><LI> threading.o(.data)
</UL>
<P><STRONG><a name="[49a]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, x509_crt.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
</UL>

<P><STRONG><a name="[4a0]"></a>x509_crt_check_parent</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, x509_crt.o(i.x509_crt_check_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_crt_check_parent &rArr; x509_name_cmp &rArr; x509_string_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[49c]"></a>x509_crt_parse_der_core</STRONG> (Thumb, 734 bytes, Stack size 104 bytes, x509_crt.o(i.x509_crt_parse_der_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = x509_crt_parse_der_core &rArr; mbedtls_x509_get_name &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_skip_parse
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[4a1]"></a>x509_crt_verify_child</STRONG> (Thumb, 468 bytes, Stack size 112 bytes, x509_crt.o(i.x509_crt_verify_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + In Cycle
<LI>Call Chain = x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[4a2]"></a>x509_crt_verify_top</STRONG> (Thumb, 440 bytes, Stack size 104 bytes, x509_crt.o(i.x509_crt_verify_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = x509_crt_verify_top &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[534]"></a>x509_name_cmp</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, x509_crt.o(i.x509_name_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_name_cmp &rArr; x509_string_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
</UL>

<P><STRONG><a name="[49f]"></a>x509_profile_check_key</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, x509_crt.o(i.x509_profile_check_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = x509_profile_check_key
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[538]"></a>x509_profile_check_md_alg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x509_crt.o(i.x509_profile_check_md_alg))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
</UL>

<P><STRONG><a name="[49e]"></a>x509_profile_check_pk_alg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x509_crt.o(i.x509_profile_check_pk_alg))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[535]"></a>x509_skip_parse</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, x509_crt.o(i.x509_skip_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_skip_parse &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[539]"></a>x509_string_cmp</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, x509_crt.o(i.x509_string_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = x509_string_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
</UL>

<P><STRONG><a name="[3eb]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, asn1parse.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>

<P><STRONG><a name="[a2]"></a>get_no_padding</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cipher.o(i.get_no_padding))
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(i.mbedtls_cipher_set_padding_mode)
</UL>
<P><STRONG><a name="[3f4]"></a>mbedtls_cipher_get_block_size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cipher.o(i.mbedtls_cipher_get_block_size))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
</UL>

<P><STRONG><a name="[400]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, md.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[424]"></a>mbedtls_zeroize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pem.o(i.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
</UL>

<P><STRONG><a name="[427]"></a>pem_aes_decrypt</STRONG> (Thumb, 86 bytes, Stack size 120 bytes, pem.o(i.pem_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2636 + Unknown Stack Size
<LI>Call Chain = pem_aes_decrypt &rArr; mbedtls_aes_crypt_cbc_alt &rArr; ali_aes_init &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec_alt
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init_alt
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free_alt
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[4f2]"></a>pem_pbkdf1</STRONG> (Thumb, 164 bytes, Stack size 128 bytes, pem.o(i.pem_pbkdf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pem_pbkdf1 &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[42f]"></a>pk_hashlen_helper</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pk.o(i.pk_hashlen_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
</UL>

<P><STRONG><a name="[429]"></a>pk_get_pk_alg</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, pkparse.o(i.pk_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pk_get_pk_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[42c]"></a>pk_get_rsapubkey</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, pkparse.o(i.pk_get_rsapubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pk_get_rsapubkey &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[476]"></a>mbedtls_ssl_hs_hdr_len</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl_cli.o(i.mbedtls_ssl_hs_hdr_len))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[519]"></a>mbedtls_ssl_own_key</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_cli.o(i.mbedtls_ssl_own_key))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[474]"></a>ssl_parse_certificate_request</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_certificate_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ssl_parse_certificate_request &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[516]"></a>ssl_parse_hello_verify_request</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ssl_cli.o(i.ssl_parse_hello_verify_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ssl_parse_hello_verify_request &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[471]"></a>ssl_parse_server_hello</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_parse_server_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = ssl_parse_server_hello &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_hello_verify_request
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_fatal_handshake_failure
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[473]"></a>ssl_parse_server_key_exchange</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ssl_cli.o(i.ssl_parse_server_key_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ssl_parse_server_key_exchange &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_read_record_layer &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_resend &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hs_hdr_len
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[47b]"></a>ssl_write_certificate_verify</STRONG> (Thumb, 256 bytes, Stack size 88 bytes, ssl_cli.o(i.ssl_write_certificate_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_key
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[470]"></a>ssl_write_client_hello</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, ssl_cli.o(i.ssl_write_client_hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ssl_write_client_hello &rArr; mbedtls_ssl_write_record &rArr; ssl_flight_append &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_flight_completed
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[479]"></a>ssl_write_encrypted_pms</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, ssl_cli.o(i.ssl_write_encrypted_pms))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ssl_write_encrypted_pms &rArr; mbedtls_pk_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_encrypt
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[51a]"></a>ssl_write_signature_algorithms_ext</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, ssl_cli.o(i.ssl_write_signature_algorithms_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ssl_write_signature_algorithms_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hash_from_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[4a6]"></a>x509_get_attr_type_value</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, x509.o(i.x509_get_attr_type_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
</UL>

<P><STRONG><a name="[260]"></a>_ali_get_hash_size</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rsa.o(i._ali_get_hash_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ali_get_hash_size &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_verify
</UL>

<P><STRONG><a name="[261]"></a>_ali_get_hash_type</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rsa.o(i._ali_get_hash_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ali_get_hash_type &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_verify
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_public_encrypt
</UL>

<P><STRONG><a name="[262]"></a>_ali_rsa_key_decode</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, rsa.o(i._ali_rsa_key_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = _ali_rsa_key_decode &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_verify
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ali_rsa_public_encrypt_pre
</UL>

<P><STRONG><a name="[264]"></a>_ali_rsa_public_encrypt_pre</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rsa.o(i._ali_rsa_public_encrypt_pre))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = _ali_rsa_public_encrypt_pre &rArr; _ali_rsa_key_decode &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ali_rsa_key_decode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rsa_public_encrypt
</UL>

<P><STRONG><a name="[8f]"></a>myrand</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rsa.o(i.myrand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = myrand &rArr; ali_rand_gen &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_seed
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_rand_gen
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rsa.o(i.ali_rsa_public_encrypt)
</UL>
<P><STRONG><a name="[d5]"></a>aes_crypt_cbc_wrap</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, cipher_wrap.o(i.aes_crypt_cbc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2540 + Unknown Stack Size
<LI>Call Chain = aes_crypt_cbc_wrap &rArr; mbedtls_aes_crypt_cbc_alt &rArr; ali_aes_init &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc &rArr; aes_gen_tables
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc_alt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>aes_crypt_ecb_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_crypt_ecb_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb_alt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb_alt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>aes_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = aes_ctx_alloc &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init_alt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>aes_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(i.aes_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = aes_ctx_free &rArr; mbedtls_aes_free_alt &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free_alt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>aes_setkey_dec_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_setkey_dec_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec_alt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec_alt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>aes_setkey_enc_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(i.aes_setkey_enc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc_alt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc_alt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>md5_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md5_clone_wrap &rArr; mbedtls_md5_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>md5_ctx_alloc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md_wrap.o(i.md5_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = md5_ctx_alloc &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>md5_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(i.md5_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = md5_ctx_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>md5_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = md5_finish_wrap &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>md5_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = md5_process_wrap &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>md5_starts_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>md5_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.md5_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = md5_update_wrap &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>sha1_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_clone_wrap &rArr; mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>sha1_ctx_alloc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = sha1_ctx_alloc &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>sha1_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = sha1_ctx_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>sha1_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sha1_finish_wrap &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>sha1_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sha1_process_wrap &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>sha1_starts_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>sha1_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sha1_update_wrap &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>sha224_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>sha224_ctx_alloc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = sha224_ctx_alloc &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>sha224_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = sha224_ctx_free &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>sha224_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>sha224_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>sha224_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>sha224_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.constdata)
<LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>sha224_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha224_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>sha256_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>sha256_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(i.sha256_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>rsa_alloc_wrap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = rsa_alloc_wrap &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init_alt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>rsa_can_do</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>rsa_debug_wrap</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_debug_wrap))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>rsa_decrypt_wrap</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, pk_wrap.o(i.rsa_decrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rsa_decrypt_wrap &rArr; rsa_decrypt_alt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_alt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>rsa_encrypt_wrap</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, pk_wrap.o(i.rsa_encrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2672 + Unknown Stack Size
<LI>Call Chain = rsa_encrypt_wrap &rArr; rsa_encrypt_alt &rArr; ali_rsa_public_encrypt &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_alt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>rsa_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(i.rsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = rsa_free_wrap &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free_alt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>rsa_get_bitlen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pk_wrap.o(i.rsa_get_bitlen))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>rsa_sign_wrap</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, pk_wrap.o(i.rsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rsa_sign_wrap &rArr; rsa_sign_alt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_alt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>rsa_verify_wrap</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, pk_wrap.o(i.rsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 3840 + Unknown Stack Size
<LI>Call Chain = rsa_verify_wrap &rArr; rsa_verify_alt &rArr; ali_rsa_verify &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_alt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[3e8]"></a>aes_gen_tables</STRONG> (Thumb, 412 bytes, Stack size 2084 bytes, aes.o(i.aes_gen_tables))
<BR><BR>[Stack]<UL><LI>Max Depth = 2084<LI>Call Chain = aes_gen_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>

<P><STRONG><a name="[419]"></a>mbedtls_mpi_zeroize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>

<P><STRONG><a name="[416]"></a>mpi_montmul</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, bignum.o(i.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpi_montmul &rArr; mpi_sub_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[417]"></a>mpi_montred</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, bignum.o(i.mpi_montred))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_sub_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[41e]"></a>mpi_mul_hlp</STRONG> (Thumb, 898 bytes, Stack size 20 bytes, bignum.o(i.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[41f]"></a>mpi_sub_hlp</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, bignum.o(i.mpi_sub_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[442]"></a>mgf_mask</STRONG> (Thumb, 128 bytes, Stack size 104 bytes, rsa.o(i.mgf_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mgf_mask &rArr; mbedtls_md_update
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
</UL>

<P><STRONG><a name="[43c]"></a>rsa_prepare_blinding</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, rsa.o(i.rsa_prepare_blinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; sizetoindex
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[274]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[246]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[27f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8d]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0vsnprintf)
<LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[8e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[83]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
